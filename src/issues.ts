export type IssueId = keyof typeof idlessIssues;
export type Issues = { [key in IssueId]: Issue };

export const IssueType = {
  PG: Symbol("punctuationAndGrammar"),
  SP: Symbol("spelling"),
  SW: Symbol("similarWords"),
  SL: Symbol("slurs"),
}

export interface Issue {
  id: IssueId,
  regex: RegExp,
  ui: {
    label: string,
    toLabel?: string,
    copy?: string,
    paste?: string,
    copyLabels?: boolean,
    mw?: string,
  }
  type: Symbol,
}

const idlessIssues = {
  space: { regex: /[ ]{2}/g, ui: { label: "Two spaces", toLabel: "", copy: "  ", paste: " ", mw: "", copyLabels: false}, type: IssueType.PG},
  space2: { regex: /\n /g, ui: { label: "Space after newline", toLabel: "", copy: "\\n ", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  space3: { regex: / \.([^\.]|$)/g, ui: { label: "Space before period", toLabel: "", copy: " \\.([^\\.]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  period: { regex: /([^\.]|^)\.\.([^\.]|$)/g, ui: { label: "..", toLabel: "", copy: "([^\\.]|^)\\.\\.([^\\.]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  period2: { regex: /(^|[^\.])\.[?!$]/g, ui: { label: ". before ? or !", toLabel: "", copy: "[^\\.]\\.[?!$]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  period3: { regex: /[?!]\./g, ui: { label: ". after ? or !", toLabel: "", copy: "[?!]\\.", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  period4: { regex: /”\.([^\.])/gi, ui: { label: "Period outside ”", toLabel: "", copy: "”\\.([^\\.])", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  period5: { regex: /’\.([^\.])/gi, ui: { label: "Period outside ’", toLabel: "", copy: "’\\.([^\\.])", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  apostrophe: { regex: /'/g, ui: { label: "Straight '", toLabel: "", copy: "\\'", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  quote: { regex: /"/g, ui: { label: "Straight \"", toLabel: "", copy: "\\\"", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  startquote: { regex: /”[^“]*?”/g, ui: { label: "Missing start quotes", toLabel: "", copy: "”[^“]*?”", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  endquote: { regex: /“[^”]*?“/g, ui: { label: "Missing end quotes", toLabel: "", copy: "“[^”]*?“", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  apostrophe2: { regex: /‘s\b/gi, ui: { label: "‘s", toLabel: "", copy: "‘s\\b", paste: "’s", mw: "", copyLabels: false}, type: IssueType.PG},
  possessive: { regex: /s’\s/gi, ui: { label: "s’ (singular possessive?)", toLabel: "", copy: "s’\\s", paste: "s’s", mw: "", copyLabels: false}, type: IssueType.PG},
  comma: { regex: /”,/gi, ui: { label: "Comma outside ”", toLabel: "", copy: "”,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  comma2: { regex: /’,/gi, ui: { label: "Comma outside ’", toLabel: "", copy: "’,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  too: { regex: /, too\b/gi, ui: { label: ", too", toLabel: "", copy: ", too\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  either: { regex: /, either/gi, ui: { label: ", either", toLabel: "", copy: ", either", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  bang: { regex: /!\?/g, ui: { label: "!?", toLabel: "", copy: "!\\?", paste: "?!", mw: "", copyLabels: false}, type: IssueType.PG},
  bang2: { regex: /([^!]|^)!!([^!]|$)/g, ui: { label: "!!", toLabel: "", copy: "([^!]|^)!!([^!]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  ellipsis1: { regex: /\.\.\.\./g, ui: { label: "....", toLabel: "", copy: "\\.\\.\\.\\.", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  ellipsis2: { regex: /\.\.\. [a-z]/g, ui: { label: "... a", toLabel: "", copy: "\\.\\.\\. [a-z]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  ellipsis3: { regex: /\.\.\.[A-Z]/g, ui: { label: "...A", toLabel: "", copy: "\\.\\.\\.[A-Z]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  ellipsis4: { regex: /…/g, ui: { label: "… (symbol)", toLabel: "", copy: "[\\u2026]", paste: "...", mw: "", copyLabels: false}, type: IssueType.PG},
  emdash1: { regex: /— /g, ui: { label: "—[space]", toLabel: "", copy: "— ", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  emdash2: { regex: / —/g, ui: { label: "[space]—", toLabel: "", copy: " —", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  endash: { regex: /–/g, ui: { label: "– (endash)", toLabel: "", copy: "–", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  double_hyphen: { regex: /--/g, ui: { label: "-- (double hyphen)", toLabel: "", copy: "--", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  t_th: { regex: /t-th/gi, ui: { label: "t-th", toLabel: "", copy: "t-th", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  w_wh: { regex: /w-wh/gi, ui: { label: "w-wh", toLabel: "", copy: "w-wh", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  adverb: { regex: /ly-(?!(?:fledged))/gi, ui: { label: "hyphenated adverbs (ly-)", toLabel: "", copy: "ly-(?!(?:fledged))", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  hyphen_numbers: { regex: /(twen|thir|for|fif|six|seven|eigh|nine)ty (one|two|three|four|five|six|seven|eight|nine)/gi, ui: { label: "Hyphenate numbers [21-99]", toLabel: "", copy: "(twen|thir|for|fif|six|seven|eigh|nine)ty (one|two|three|four|five|six|seven|eight|nine)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  double_possessive: { regex: /.+’s and .+’s/gi, ui: { label: "Double possessive?", toLabel: "", copy: "'s \\band ([^\\s]+)'s", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  less_plural: { regex: /\bless [a-z]+(?<!ou)s\b/gi, ui: { label: "'Less' used for countable quantity?", toLabel: "", copy: "\\bless [a-z]+(?<!ou)s\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  causepos: { regex: /‘cause\b/gi, ui: { label: "‘cause", toLabel: "", copy: "‘cause\\b", paste: "’cause", mw: "", copyLabels: false}, type: IssueType.PG},
  suppos: { regex: /‘sup\b/gi, ui: { label: "‘sup", toLabel: "", copy: "‘sup\\b", paste: "’sup", mw: "", copyLabels: false}, type: IssueType.PG},
  empos: { regex: /‘em\b/gi, ui: { label: "‘em", toLabel: "", copy: "‘em\\b", paste: "’em", mw: "", copyLabels: false}, type: IssueType.PG},
  boutpos: { regex: /‘bout\b/gi, ui: { label: "‘bout", toLabel: "", copy: "‘bout\\b", paste: "’bout", mw: "", copyLabels: false}, type: IssueType.PG},
  notherpos: { regex: /‘nother\b/gi, ui: { label: "‘nother", toLabel: "", copy: "‘nother\\b", paste: "’nother", mw: "", copyLabels: false}, type: IssueType.PG},
  forepos: { regex: /‘fore\b/gi, ui: { label: "‘fore", toLabel: "", copy: "‘fore\\b", paste: "’fore", mw: "", copyLabels: false}, type: IssueType.PG},
  fraidpos: { regex: /‘fraid\b/gi, ui: { label: "‘fraid", toLabel: "", copy: "‘fraid\\b", paste: "’fraid", mw: "", copyLabels: false}, type: IssueType.PG},
  neathpos: { regex: /‘neath\b/gi, ui: { label: "‘neath", toLabel: "", copy: "‘neath\\b", paste: "’neath", mw: "", copyLabels: false}, type: IssueType.PG},
  gainstpos: { regex: /‘gainst\b/gi, ui: { label: "‘gainst", toLabel: "", copy: "‘gainst\\b", paste: "’gainst", mw: "", copyLabels: false}, type: IssueType.PG},
  ceptpos: { regex: /‘cept\b/gi, ui: { label: "‘cept", toLabel: "", copy: "‘cept\\b", paste: "’cept", mw: "", copyLabels: false}, type: IssueType.PG},
  roundpos: { regex: /‘round\b/gi, ui: { label: "‘round", toLabel: "", copy: "‘round\\b", paste: "’round", mw: "", copyLabels: false}, type: IssueType.PG},
  tilpos: { regex: /‘til\b/gi, ui: { label: "‘til", toLabel: "", copy: "‘til\\b", paste: "’til", mw: "", copyLabels: false}, type: IssueType.PG},
  tispos: { regex: /‘tis\b/gi, ui: { label: "‘tis", toLabel: "", copy: "‘tis\\b", paste: "’tis", mw: "", copyLabels: false}, type: IssueType.PG},
  twaspos: { regex: /‘twas\b/gi, ui: { label: "‘twas", toLabel: "", copy: "‘twas\\b", paste: "’twas", mw: "", copyLabels: false}, type: IssueType.PG},
  tweenpos: { regex: /‘tween\b/gi, ui: { label: "‘tween", toLabel: "", copy: "‘tween\\b", paste: "’tween", mw: "", copyLabels: false}, type: IssueType.PG},
  twerepos: { regex: /‘twere\b/gi, ui: { label: "‘twere", toLabel: "", copy: "‘twere\\b", paste: "’twere", mw: "", copyLabels: false}, type: IssueType.PG},
  twixtpos: { regex: /‘twixt\b/gi, ui: { label: "‘twixt", toLabel: "", copy: "‘twixt\\b", paste: "’twixt", mw: "", copyLabels: false}, type: IssueType.PG},
  space_before_measurement: { regex: /[0-9](cm|m|km|centimeter|centimeters|meter|meters|kilometer|kilometers|g|kg|gram|grams|kilogram|kilograms)\b/gi, ui: { label: "No space before measurement", toLabel: "", copy: "[0-9](cm|m|km|centimeter|centimeters|meter|meters|kilometer|kilometers|g|kg|gram|grams|kilogram|kilograms)\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG},
  absent_minded: { regex: /absent-minded/gi, ui: { label: "absent-minded", toLabel: "", copy: "", paste: "", mw: "absentminded", copyLabels: true}, type: IssueType.SP},
  accidently: { regex: /accidently/gi, ui: { label: "accidently", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  ack: { regex: /acknowledgement/gi, ui: { label: "acknowledgement", toLabel: "", copy: "", paste: "", mw: "acknowledgment", copyLabels: true}, type: IssueType.SP},
  adult_like: { regex: /adult-like/gi, ui: { label: "adult-like", toLabel: "", copy: "", paste: "", mw: "adultlike", copyLabels: true}, type: IssueType.SP},
  after_effect: { regex: /after-effect/gi, ui: { label: "after-effect", toLabel: "", copy: "", paste: "", mw: "aftereffect", copyLabels: true}, type: IssueType.SP},
  ahaha: { regex: /ahaha/gi, ui: { label: "ahaha", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  aircon: { regex: /aircon/gi, ui: { label: "aircon", toLabel: "", copy: "aircon", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  air_tight: { regex: /air-tight/gi, ui: { label: "air-tight", toLabel: "", copy: "", paste: "", mw: "airtight", copyLabels: true}, type: IssueType.SP},
  all_out: { regex: /all out/gi, ui: { label: "all out (adverb)", toLabel: "", copy: "all out", paste: "", mw: "all out", copyLabels: false}, type: IssueType.SP},
  all_out2: { regex: /all-out/gi, ui: { label: "all-out (adjective)", toLabel: "", copy: "all-out", paste: "", mw: "all-out", copyLabels: false}, type: IssueType.SP},
  alright: { regex: /alright/gi, ui: { label: "alright", toLabel: "", copy: "", paste: "", mw: "all right", copyLabels: true}, type: IssueType.SP},
  ambiance: { regex: /ambiance/gi, ui: { label: "ambiance", toLabel: "", copy: "", paste: "", mw: "ambience", copyLabels: true}, type: IssueType.SP},
  ambiant: { regex: /ambiant/gi, ui: { label: "ambiant", toLabel: "", copy: "", paste: "", mw: "ambient", copyLabels: true}, type: IssueType.SP},
  animal_like: { regex: /animal-like/gi, ui: { label: "animal-like", toLabel: "", copy: "", paste: "", mw: "animallike", copyLabels: true}, type: IssueType.SP},
  arm_in_arm: { regex: /arm-in-arm/gi, ui: { label: "arm-in-arm", toLabel: "", copy: "", paste: "", mw: "arm in arm", copyLabels: true}, type: IssueType.SP},
  apologise: { regex: /apologise/gi, ui: { label: "apologise", toLabel: "", copy: "", paste: "", mw: "apologize", copyLabels: true}, type: IssueType.SP},
  apologising: { regex: /apologising/gi, ui: { label: "apologising", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  auto_pilot: { regex: /auto-pilot/gi, ui: { label: "auto-pilot", toLabel: "", copy: "", paste: "", mw: "autopilot", copyLabels: true}, type: IssueType.SP},
  axe: { regex: /\bax\b/gi, ui: { label: "ax", toLabel: "", copy: "\\bax\\b", paste: "axe", mw: "", copyLabels: false}, type: IssueType.SP},
  badmouth: { regex: /badmouth/gi, ui: { label: "badmouth", toLabel: "", copy: "", paste: "", mw: "bad-mouth", copyLabels: true}, type: IssueType.SP},
  bad_mouth: { regex: /bad mouth/gi, ui: { label: "bad mouth", toLabel: "", copy: "bad mouth", paste: "bad-mouth", mw: "bad-mouth", copyLabels: false}, type: IssueType.SP},
  back_and_forth: { regex: /back-and-forth/gi, ui: { label: "back-and-forth (noun)", toLabel: "", copy: "back-and-forth", paste: "", mw: "back-and-forth", copyLabels: false}, type: IssueType.SP},
  back_and_forth2: { regex: /back and forth/gi, ui: { label: "back and forth (adverb)", toLabel: "", copy: "back and forth", paste: "", mw: "back and forth", copyLabels: false}, type: IssueType.SP},
  back_to_back: { regex: /back to back/gi, ui: { label: "back to back", toLabel: "", copy: "", paste: "", mw: "back-to-back", copyLabels: true}, type: IssueType.SP},
  backup: { regex: /backup/gi, ui: { label: "backup (noun)", toLabel: "", copy: "backup", paste: "", mw: "backup", copyLabels: false}, type: IssueType.SP},
  back_up: { regex: /\bback up\b/gi, ui: { label: "back up (verb)", toLabel: "", copy: "\\bback up\\b", paste: "", mw: "back up", copyLabels: false}, type: IssueType.SP},
  back_up2: { regex: /back-up/gi, ui: { label: "back-up", toLabel: "", copy: "backup", paste: "", mw: "back up", copyLabels: false}, type: IssueType.SP},
  barebones: { regex: /barebones/gi, ui: { label: "barebones", toLabel: "", copy: "", paste: "", mw: "bare-bones", copyLabels: true}, type: IssueType.SP},
  bare_bones: { regex: /bare bones/gi, ui: { label: "bare bones", toLabel: "", copy: "", paste: "", mw: "bare-bones", copyLabels: true}, type: IssueType.SP},
  bathhouse: { regex: /bath house/gi, ui: { label: "bath house", toLabel: "", copy: "", paste: "", mw: "bathhouse", copyLabels: true}, type: IssueType.SP},
  bed_time: { regex: /bed time/gi, ui: { label: "bed time", toLabel: "", copy: "", paste: "", mw: "bedtime", copyLabels: true}, type: IssueType.SP},
  best_seller: { regex: /best-seller/gi, ui: { label: "best-seller", toLabel: "", copy: "", paste: "", mw: "bestseller", copyLabels: true}, type: IssueType.SP},
  bite_sized: { regex: /bite-sized/gi, ui: { label: "bite-sized", toLabel: "", copy: "", paste: "", mw: "bite-size", copyLabels: true}, type: IssueType.SP},
  black_and_white: { regex: /black and white/gi, ui: { label: "black and white", toLabel: "", copy: "", paste: "", mw: "black-and-white", copyLabels: true}, type: IssueType.SP},
  blindspot: { regex: /blindspot/gi, ui: { label: "blindspot", toLabel: "", copy: "", paste: "", mw: "blind spot", copyLabels: true}, type: IssueType.SP},
  blood_curdling: { regex: /blood-curdling/gi, ui: { label: "blood-curdling", toLabel: "", copy: "", paste: "", mw: "bloodcurdling", copyLabels: true}, type: IssueType.SP},
  blood_curdling2: { regex: /blood curdling/gi, ui: { label: "blood curdling", toLabel: "", copy: "", paste: "", mw: "bloodcurdling", copyLabels: true}, type: IssueType.SP},
  blood_red: { regex: /blood-red/gi, ui: { label: "blood-red", toLabel: "", copy: "", paste: "", mw: "bloodred", copyLabels: true}, type: IssueType.SP},
  blood_red2: { regex: /blood red/gi, ui: { label: "blood red", toLabel: "", copy: "", paste: "", mw: "bloodred", copyLabels: true}, type: IssueType.SP},
  blood_stain: { regex: /blood stain/gi, ui: { label: "blood stain", toLabel: "", copy: "", paste: "", mw: "bloodstain", copyLabels: true}, type: IssueType.SP},
  blood_stain2: { regex: /blood-stain/gi, ui: { label: "blood-stain", toLabel: "", copy: "", paste: "", mw: "bloodstain", copyLabels: true}, type: IssueType.SP},
  blood_sucker: { regex: /blood-sucker/gi, ui: { label: "blood-sucker", toLabel: "", copy: "", paste: "", mw: "bloodsucker", copyLabels: true}, type: IssueType.SP},
  blood_sucking: { regex: /blood-sucking/gi, ui: { label: "blood-sucking", toLabel: "", copy: "", paste: "", mw: "bloodsucking", copyLabels: true}, type: IssueType.SP},
  braindead: { regex: /braindead/gi, ui: { label: "braindead", toLabel: "", copy: "", paste: "", mw: "brain-dead", copyLabels: true}, type: IssueType.SP},
  brain_dead: { regex: /brain dead/gi, ui: { label: "brain dead", toLabel: "", copy: "", paste: "", mw: "brain-dead", copyLabels: true}, type: IssueType.SP},
  broadminded: { regex: /broadminded/gi, ui: { label: "broadminded", toLabel: "", copy: "", paste: "", mw: "broad-minded", copyLabels: true}, type: IssueType.SP},
  build_up: { regex: /build-up/gi, ui: { label: "build-up", toLabel: "", copy: "", paste: "", mw: "buildup", copyLabels: true}, type: IssueType.SP},
  bullseye: { regex: /bullseye/gi, ui: { label: "bullseye", toLabel: "", copy: "", paste: "", mw: "bull's-eye", copyLabels: true}, type: IssueType.SP},
  bulls_eye: { regex: /bull’s eye/gi, ui: { label: "bull’s eye", toLabel: "", copy: "", paste: "", mw: "bull's-eye", copyLabels: true}, type: IssueType.SP},
  bye_bye: { regex: /bye bye/gi, ui: { label: "bye bye", toLabel: "", copy: "", paste: "", mw: "bye-bye", copyLabels: true}, type: IssueType.SP},
  cafe: { regex: /\bcafe\b/gi, ui: { label: "cafe", toLabel: "", copy: "", paste: "", mw: "café", copyLabels: true}, type: IssueType.SP},
  cancelled: { regex: /cancelled/gi, ui: { label: "cancelled", toLabel: "", copy: "", paste: "", mw: "cancel", copyLabels: true}, type: IssueType.SP},
  cancelling: { regex: /cancelling/gi, ui: { label: "cancelling", toLabel: "", copy: "", paste: "", mw: "canceling", copyLabels: true}, type: IssueType.SP},
  cancelation: { regex: /cancelation/gi, ui: { label: "cancelation", toLabel: "", copy: "", paste: "", mw: "cancellation", copyLabels: true}, type: IssueType.SP},
  candle_holder: { regex: /candle holder/gi, ui: { label: "candle holder", toLabel: "", copy: "", paste: "", mw: "candleholder", copyLabels: true}, type: IssueType.SP},
  catch_phrase: { regex: /catch phrase/gi, ui: { label: "catch phrase", toLabel: "", copy: "", paste: "", mw: "catchphrase", copyLabels: true}, type: IssueType.SP},
  catch_phrase2: { regex: /catch-phrase/gi, ui: { label: "catch-phrase", toLabel: "", copy: "", paste: "", mw: "catchphrase", copyLabels: true}, type: IssueType.SP},
  centre: { regex: /centre/gi, ui: { label: "centre", toLabel: "", copy: "", paste: "", mw: "center", copyLabels: true}, type: IssueType.SP},
  chainmail: { regex: /chainmail/gi, ui: { label: "chainmail", toLabel: "", copy: "", paste: "", mw: "chain mail", copyLabels: true}, type: IssueType.SP},
  chit_chat: { regex: /chit-chat/gi, ui: { label: "chit-chat", toLabel: "", copy: "", paste: "", mw: "chitchat", copyLabels: true}, type: IssueType.SP},
  chit_chat2: { regex: /chit chat/gi, ui: { label: "chit chat", toLabel: "", copy: "", paste: "", mw: "chitchat", copyLabels: true}, type: IssueType.SP},
  chokehold: { regex: /chokehold/gi, ui: { label: "chokehold", toLabel: "", copy: "", paste: "", mw: "choke hold", copyLabels: true}, type: IssueType.SP},
  city_state: { regex: /city state/gi, ui: { label: "city state", toLabel: "", copy: "city state", paste: "city-state", mw: "city-state", copyLabels: false}, type: IssueType.SP},
  clean_up: { regex: /clean-up/gi, ui: { label: "clean-up", toLabel: "", copy: "", paste: "", mw: "cleanup", copyLabels: true}, type: IssueType.SP},
  clear_headed: { regex: /clear-headed/gi, ui: { label: "clear-headed", toLabel: "", copy: "", paste: "", mw: "clearheaded", copyLabels: true}, type: IssueType.SP},
  cliche: { regex: /cliche/gi, ui: { label: "cliche", toLabel: "", copy: "", paste: "", mw: "cliché", copyLabels: true}, type: IssueType.SP},
  cliff_hanger: { regex: /cliff hanger/gi, ui: { label: "cliff hanger", toLabel: "", copy: "", paste: "", mw: "cliff-hanger", copyLabels: true}, type: IssueType.SP},
  cliffhanger: { regex: /cliffhanger/gi, ui: { label: "cliffhanger", toLabel: "", copy: "", paste: "", mw: "cliff-hanger", copyLabels: true}, type: IssueType.SP},
  co_worker: { regex: /co-worker/gi, ui: { label: "co-worker", toLabel: "", copy: "", paste: "", mw: "coworker", copyLabels: true}, type: IssueType.SP},
  cold_hearted: { regex: /cold-hearted/gi, ui: { label: "cold-hearted", toLabel: "", copy: "", paste: "", mw: "coldhearted", copyLabels: true}, type: IssueType.SP},
  collar_bone: { regex: /collar bone/gi, ui: { label: "collar bone", toLabel: "", copy: "", paste: "", mw: "collarbone", copyLabels: true}, type: IssueType.SP},
  colour: { regex: /colour/gi, ui: { label: "colour", toLabel: "", copy: "", paste: "", mw: "color", copyLabels: true}, type: IssueType.SP},
  concensus: { regex: /concensus/gi, ui: { label: "concensus", toLabel: "", copy: "", paste: "", mw: "consensus", copyLabels: true}, type: IssueType.SP},
  counter_attack: { regex: /counter attack/gi, ui: { label: "counter attack", toLabel: "", copy: "", paste: "", mw: "counterattack", copyLabels: true}, type: IssueType.SP},
  coup: { regex: /coup d’etat/gi, ui: { label: "coup d’etat", toLabel: "", copy: "", paste: "", mw: "coup d’état", copyLabels: true}, type: IssueType.SP},
  coup_de_grace: { regex: /coup de grace/gi, ui: { label: "coup de grace", toLabel: "", copy: "", paste: "", mw: "coup de grâce", copyLabels: true}, type: IssueType.SP},
  criss_cross: { regex: /criss-cross/gi, ui: { label: "criss-cross", toLabel: "", copy: "", paste: "", mw: "crisscross", copyLabels: true}, type: IssueType.SP},
  crossdress: { regex: /crossdress/gi, ui: { label: "crossdress", toLabel: "", copy: "", paste: "", mw: "crossdress", copyLabels: true}, type: IssueType.SP},
  cross_fire: { regex: /cross-fire/gi, ui: { label: "cross-fire", toLabel: "", copy: "", paste: "", mw: "cross fire", copyLabels: true}, type: IssueType.SP},
  crossfire: { regex: /crossfire/gi, ui: { label: "crossfire", toLabel: "", copy: "", paste: "", mw: "cross fire", copyLabels: true}, type: IssueType.SP},
  cross_hair: { regex: /cross-hair/gi, ui: { label: "cross-hair", toLabel: "", copy: "", paste: "", mw: "crosshair", copyLabels: true}, type: IssueType.SP},
  cross_hair2: { regex: /cross hair/gi, ui: { label: "cross hair", toLabel: "", copy: "", paste: "", mw: "crosshair", copyLabels: true}, type: IssueType.SP},
  cross_section: { regex: /cross-section/gi, ui: { label: "cross-section", toLabel: "", copy: "", paste: "", mw: "cross section", copyLabels: true}, type: IssueType.SP},
  crystal_clear: { regex: /crystal-clear/gi, ui: { label: "crystal-clear", toLabel: "", copy: "", paste: "", mw: "crystal clear", copyLabels: true}, type: IssueType.SP},
  crystalized: { regex: /crystalized/gi, ui: { label: "crystalized", toLabel: "", copy: "", paste: "", mw: "crystallize", copyLabels: true}, type: IssueType.SP},
  cut_and_dried: { regex: /cut and dried/gi, ui: { label: "cut and dried", toLabel: "", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP},
  cut_and_dry: { regex: /cut and dry/gi, ui: { label: "cut and dry", toLabel: "", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP},
  cut_and_dry2: { regex: /cut-and-dry/gi, ui: { label: "cut-and-dry", toLabel: "", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP},
  damndest: { regex: /damndest/gi, ui: { label: "damndest", toLabel: "", copy: "", paste: "", mw: "damnedest", copyLabels: true}, type: IssueType.SP},
  day_long: { regex: /day-long/gi, ui: { label: "day-long", toLabel: "", copy: "", paste: "", mw: "daylong", copyLabels: true}, type: IssueType.SP},
  day_to_day_life: { regex: /day to day life/gi, ui: { label: "day to day life", toLabel: "", copy: "", paste: "", mw: "day-to-day", copyLabels: true}, type: IssueType.SP},
  deadset: { regex: /deadset/gi, ui: { label: "deadset", toLabel: "", copy: "", paste: "", mw: "dead set", copyLabels: true}, type: IssueType.SP},
  dead_set: { regex: /dead-set/gi, ui: { label: "dead-set", toLabel: "", copy: "", paste: "", mw: "dead set", copyLabels: true}, type: IssueType.SP},
  deal_breaker: { regex: /deal breaker/gi, ui: { label: "deal breaker", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  dealbreaker: { regex: /dealbreaker/gi, ui: { label: "dealbreaker", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  deal_maker: { regex: /deal-maker/gi, ui: { label: "deal-maker", toLabel: "", copy: "", paste: "", mw: "dealmaker", copyLabels: true}, type: IssueType.SP},
  deal_making: { regex: /deal-making/gi, ui: { label: "deal-making", toLabel: "", copy: "", paste: "", mw: "dealmaking", copyLabels: true}, type: IssueType.SP},
  deep_fry: { regex: /deep fry/gi, ui: { label: "deep fry", toLabel: "", copy: "", paste: "", mw: "deep-fry", copyLabels: true}, type: IssueType.SP},
  defence: { regex: /defence/gi, ui: { label: "defence", toLabel: "", copy: "", paste: "", mw: "defense", copyLabels: true}, type: IssueType.SP},
  dejavu: { regex: /deja vu/gi, ui: { label: "deja vu", toLabel: "", copy: "", paste: "", mw: "déjà vu", copyLabels: true}, type: IssueType.SP},
  descendent: { regex: /descendent/gi, ui: { label: "descendent", toLabel: "", copy: "", paste: "", mw: "descendant", copyLabels: true}, type: IssueType.SP},
  dieing: { regex: /dieing/gi, ui: { label: "dieing", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  dinner_time: { regex: /dinner time/gi, ui: { label: "dinner time", toLabel: "", copy: "", paste: "", mw: "dinnertime", copyLabels: true}, type: IssueType.SP},
  discernable: { regex: /discernable/gi, ui: { label: "discernable", toLabel: "", copy: "", paste: "", mw: "discernible", copyLabels: true}, type: IssueType.SP},
  discernably: { regex: /discernably/gi, ui: { label: "discernably", toLabel: "", copy: "", paste: "", mw: "discernibly", copyLabels: true}, type: IssueType.SP},
  discreet: { regex: /discreet/gi, ui: { label: "discreet (discrete?)", toLabel: "", copy: "discreet", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  discrete: { regex: /discrete/gi, ui: { label: "discrete (discreet?)", toLabel: "", copy: "discrete", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  doppelganger: { regex: /doppelganger/gi, ui: { label: "doppelganger", toLabel: "", copy: "", paste: "", mw: "doppelgänger", copyLabels: true}, type: IssueType.SP},
  doppleganger: { regex: /doppleganger/gi, ui: { label: "doppleganger", toLabel: "", copy: "", paste: "", mw: "doppelgänger", copyLabels: true}, type: IssueType.SP},
  double_take: { regex: /double-take/gi, ui: { label: "double-take", toLabel: "", copy: "", paste: "", mw: "double take", copyLabels: true}, type: IssueType.SP},
  doubletake: { regex: /doubletake/gi, ui: { label: "doubletake", toLabel: "", copy: "", paste: "", mw: "double take", copyLabels: true}, type: IssueType.SP},
  draw_string: { regex: /draw string/gi, ui: { label: "draw string", toLabel: "", copy: "draw string", paste: "drawstring", mw: "drawstring", copyLabels: false}, type: IssueType.SP},
  dream_world: { regex: /dream world/gi, ui: { label: "dream world", toLabel: "", copy: "dream world", paste: "dreamworld", mw: "dreamworld", copyLabels: false}, type: IssueType.SP},
  dream_world2: { regex: /dream-world/gi, ui: { label: "dream-world", toLabel: "", copy: "dream-world", paste: "dreamworld", mw: "dreamworld", copyLabels: false}, type: IssueType.SP},
  drop_out: { regex: /drop-out/gi, ui: { label: "drop-out", toLabel: "", copy: "", paste: "", mw: "dropout", copyLabels: true}, type: IssueType.SP},
  drier: { regex: /drier/gi, ui: { label: "drier (adjective)", toLabel: "", copy: "drier", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  dryer: { regex: /dryer/gi, ui: { label: "dryer (appliance)", toLabel: "", copy: "dryer", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  duty_bound: { regex: /duty-bound/gi, ui: { label: "duty-bound", toLabel: "", copy: "", paste: "", mw: "duty bound", copyLabels: true}, type: IssueType.SP},
  emphasise: { regex: /emphasise/gi, ui: { label: "emphasise", toLabel: "", copy: "", paste: "", mw: "emphasize", copyLabels: true}, type: IssueType.SP},
  emphasising: { regex: /emphasising/gi, ui: { label: "emphasising", toLabel: "", copy: "", paste: "", mw: "emphasize", copyLabels: true}, type: IssueType.SP},
  enroute: { regex: /enroute/gi, ui: { label: "enroute", toLabel: "", copy: "", paste: "", mw: "en route", copyLabels: true}, type: IssueType.SP},
  entree: { regex: /entree/gi, ui: { label: "entree", toLabel: "", copy: "", paste: "", mw: "entrée", copyLabels: true}, type: IssueType.SP},
  ever_so: { regex: /ever-so/gi, ui: { label: "ever-so", toLabel: "", copy: "", paste: "", mw: "ever so", copyLabels: true}, type: IssueType.SP},
  eyepatch: { regex: /eyepatch/gi, ui: { label: "eyepatch", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  eye_patch: { regex: /eye-patch/gi, ui: { label: "eye-patch", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  eye_to_eye: { regex: /eye-to-eye/gi, ui: { label: "eye-to-eye", toLabel: "", copy: "", paste: "", mw: "see eye to eye", copyLabels: true}, type: IssueType.SP},
  eye_witness: { regex: /eye witness/gi, ui: { label: "eye witness", toLabel: "", copy: "", paste: "", mw: "eyewitness", copyLabels: true}, type: IssueType.SP},
  eye_witness2: { regex: /eye-witness/gi, ui: { label: "eye-witness", toLabel: "", copy: "", paste: "", mw: "eyewitness", copyLabels: true}, type: IssueType.SP},
  face_down: { regex: /face down/gi, ui: { label: "face down", toLabel: "", copy: "face down", paste: "facedown", mw: "facedown", copyLabels: false}, type: IssueType.SP},
  face_down2: { regex: /face-down/gi, ui: { label: "face-down", toLabel: "", copy: "", paste: "", mw: "facedown", copyLabels: true}, type: IssueType.SP},
  face_to_face: { regex: /face to face/gi, ui: { label: "face to face", toLabel: "", copy: "", paste: "", mw: "face-to-face", copyLabels: true}, type: IssueType.SP},
  farsight: { regex: /farsight/gi, ui: { label: "farsight", toLabel: "", copy: "", paste: "", mw: "far-sight", copyLabels: true}, type: IssueType.SP},
  fast_food: { regex: /fast-food/gi, ui: { label: "fast-food", toLabel: "", copy: "fast-food", paste: "fast food", mw: "fast food", copyLabels: false}, type: IssueType.SP},
  fast_food2: { regex: /fast food/gi, ui: { label: "fast food", toLabel: "", copy: "fast food", paste: "fast-food", mw: "fast-food", copyLabels: false}, type: IssueType.SP},
  fiance: { regex: /\bfiance[^e]/gi, ui: { label: "fiance", toLabel: "", copy: "\\bfiance[^e]", paste: "fiancé", mw: "fiancé", copyLabels: false}, type: IssueType.SP},
  fiancee: { regex: /fiancee/gi, ui: { label: "fiancee", toLabel: "", copy: "", paste: "", mw: "fiancée", copyLabels: true}, type: IssueType.SP},
  filet: { regex: /filet/gi, ui: { label: "filet (lace?)", toLabel: "", copy: "filet", paste: "fillet", mw: "fillet", copyLabels: false}, type: IssueType.SP},
  fine_tune: { regex: /fine tune/gi, ui: { label: "fine tune", toLabel: "", copy: "fine tune", paste: "fine-tune", mw: "fine-tune", copyLabels: false}, type: IssueType.SP},
  fine_tuning: { regex: /fine tuning/gi, ui: { label: "fine tuning", toLabel: "", copy: "fine tuning", paste: "fine-tuning", mw: "fine-tune", copyLabels: false}, type: IssueType.SP},
  finger_like: { regex: /finger-like/gi, ui: { label: "finger-like", toLabel: "", copy: "", paste: "", mw: "fingerlike", copyLabels: true}, type: IssueType.SP},
  first_aid: { regex: /first-aid/gi, ui: { label: "first-aid", toLabel: "", copy: "", paste: "", mw: "first aid", copyLabels: true}, type: IssueType.SP},
  first_hand: { regex: /first-hand/gi, ui: { label: "first-hand", toLabel: "", copy: "", paste: "", mw: "firsthand", copyLabels: true}, type: IssueType.SP},
  first_hand2: { regex: /first hand/gi, ui: { label: "first hand", toLabel: "", copy: "first hand", paste: "firsthand", mw: "firsthand", copyLabels: false}, type: IssueType.SP},
  fist_fight: { regex: /fist-fight/gi, ui: { label: "fist-fight", toLabel: "", copy: "", paste: "", mw: "fistfight", copyLabels: true}, type: IssueType.SP},
  fist_fight2: { regex: /fist fight/gi, ui: { label: "fist fight", toLabel: "", copy: "", paste: "", mw: "fistfight", copyLabels: true}, type: IssueType.SP},
  fist_full: { regex: /fist full/gi, ui: { label: "fist full", toLabel: "", copy: "fist full", paste: "fistful", mw: "fistful", copyLabels: false}, type: IssueType.SP},
  flipside: { regex: /flipside/gi, ui: { label: "flipside", toLabel: "", copy: "", paste: "", mw: "flip side", copyLabels: true}, type: IssueType.SP},
  followup: { regex: /followup/gi, ui: { label: "followup", toLabel: "", copy: "", paste: "", mw: "follow-up", copyLabels: true}, type: IssueType.SP},
  footsoldier: { regex: /footsoldier/gi, ui: { label: "footsoldier", toLabel: "", copy: "", paste: "", mw: "foot soldier", copyLabels: true}, type: IssueType.SP},
  forcefield: { regex: /forcefield/gi, ui: { label: "forcefield", toLabel: "", copy: "", paste: "", mw: "force field", copyLabels: true}, type: IssueType.SP},
  forego: { regex: /forego/gi, ui: { label: "forego", toLabel: "", copy: "", paste: "", mw: "forgo", copyLabels: true}, type: IssueType.SP},
  forewent: { regex: /forewent/gi, ui: { label: "forewent", toLabel: "", copy: "", paste: "", mw: "forgo", copyLabels: true}, type: IssueType.SP},
  form_fitting: { regex: /form-fitting/gi, ui: { label: "form-fitting", toLabel: "", copy: "", paste: "", mw: "formfitting", copyLabels: true}, type: IssueType.SP},
  forsaw: { regex: /forsaw/gi, ui: { label: "forsaw", toLabel: "", copy: "", paste: "", mw: "foresee", copyLabels: true}, type: IssueType.SP},
  forsee: { regex: /forsee/gi, ui: { label: "forsee", toLabel: "", copy: "", paste: "", mw: "foresee", copyLabels: true}, type: IssueType.SP},
  foul_mouthed: { regex: /foul-mouthed/gi, ui: { label: "foul-mouthed", toLabel: "", copy: "", paste: "", mw: "foulmouthed", copyLabels: true}, type: IssueType.SP},
  free_fall: { regex: /free-fall/gi, ui: { label: "free-fall (verb)", toLabel: "", copy: "free-fall", paste: "", mw: "free-fall", copyLabels: false}, type: IssueType.SP},
  free_fall2: { regex: /free fall/gi, ui: { label: "free fall (noun)", toLabel: "", copy: "free fall", paste: "", mw: "free fall", copyLabels: false}, type: IssueType.SP},
  free_flowing: { regex: /free flowing/gi, ui: { label: "free flowing", toLabel: "", copy: "", paste: "", mw: "free-flowing", copyLabels: true}, type: IssueType.SP},
  free_spirited: { regex: /free spirited/gi, ui: { label: "free spirited", toLabel: "", copy: "", paste: "", mw: "free-spirited", copyLabels: true}, type: IssueType.SP},
  frontline1: { regex: /frontline/gi, ui: { label: "frontline (adjective)", toLabel: "", copy: "frontline", paste: "", mw: "frontline", copyLabels: false}, type: IssueType.SP},
  frontline2: { regex: /front line/gi, ui: { label: "front line (noun)", toLabel: "", copy: "front line", paste: "", mw: "front line", copyLabels: false}, type: IssueType.SP},
  frontlines: { regex: /frontlines/gi, ui: { label: "frontlines", toLabel: "", copy: "", paste: "", mw: "front line", copyLabels: true}, type: IssueType.SP},
  g_force: { regex: /\bg force/g, ui: { label: "g force", toLabel: "", copy: "", paste: "", mw: "g-force", copyLabels: true}, type: IssueType.SP},
  game_changer: { regex: /game-changer/gi, ui: { label: "game-changer", toLabel: "", copy: "", paste: "", mw: "game changer", copyLabels: true}, type: IssueType.SP},
  gamechanger: { regex: /gamechanger/gi, ui: { label: "gamechanger", toLabel: "", copy: "", paste: "", mw: "game changer", copyLabels: true}, type: IssueType.SP},
  gameplan: { regex: /gameplan/gi, ui: { label: "gameplan", toLabel: "", copy: "", paste: "", mw: "game plan", copyLabels: true}, type: IssueType.SP},
  gatling: { regex: /gatling gun/g, ui: { label: "gatling gun", toLabel: "", copy: "", paste: "", mw: "Gatling gun", copyLabels: true}, type: IssueType.SP},
  geez: { regex: /\bgeez\b/gi, ui: { label: "geez", toLabel: "", copy: "geez\\b", paste: "jeez", mw: "jeez", copyLabels: false}, type: IssueType.SP},
  glovebox: { regex: /glovebox/gi, ui: { label: "glovebox", toLabel: "", copy: "", paste: "", mw: "glove box", copyLabels: true}, type: IssueType.SP},
  goodwill: { regex: /good will/gi, ui: { label: "good will", toLabel: "", copy: "", paste: "", mw: "goodwill", copyLabels: true}, type: IssueType.SP},
  good_will: { regex: /good-will/gi, ui: { label: "good-will", toLabel: "", copy: "", paste: "", mw: "goodwill", copyLabels: true}, type: IssueType.SP},
  great_grand: { regex: /great grand/gi, ui: { label: "great grand (relationship?)", toLabel: "", copy: "great grand", paste: "great-grand", mw: "", copyLabels: false}, type: IssueType.SP},
  grevious: { regex: /grevious/gi, ui: { label: "grevious", toLabel: "", copy: "", paste: "", mw: "grievous", copyLabels: true}, type: IssueType.SP},
  grey: { regex: /grey/gi, ui: { label: "grey", toLabel: "", copy: "", paste: "", mw: "gray", copyLabels: true}, type: IssueType.SP},
  grinded: { regex: /grinded/gi, ui: { label: "grinded", toLabel: "", copy: "", paste: "", mw: "grind", copyLabels: true}, type: IssueType.SP},
  grit: { regex: /\bgrit\b/gi, ui: { label: "grit (should be gritted, past tense?)", toLabel: "", copy: "grit\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  grownup: { regex: /grownup/gi, ui: { label: "grownup", toLabel: "", copy: "", paste: "", mw: "grown-up", copyLabels: true}, type: IssueType.SP},
  guerrila: { regex: /guerrila/gi, ui: { label: "guerrila", toLabel: "", copy: "", paste: "", mw: "guerrilla", copyLabels: true}, type: IssueType.SP},
  guerilla: { regex: /guerilla/gi, ui: { label: "guerilla", toLabel: "", copy: "", paste: "", mw: "guerrilla", copyLabels: true}, type: IssueType.SP},
  gun_powder: { regex: /gun powder/gi, ui: { label: "gun powder", toLabel: "", copy: "", paste: "", mw: "gunpowder", copyLabels: true}, type: IssueType.SP},
  halfmoon: { regex: /halfmoon/gi, ui: { label: "halfmoon", toLabel: "", copy: "", paste: "", mw: "half-moon", copyLabels: true}, type: IssueType.SP},
  half_moon: { regex: /half moon/gi, ui: { label: "half moon", toLabel: "", copy: "", paste: "", mw: "half-moon", copyLabels: true}, type: IssueType.SP},
  halftruth: { regex: /halftruth/gi, ui: { label: "halftruth", toLabel: "", copy: "", paste: "", mw: "half-truth", copyLabels: true}, type: IssueType.SP},
  half_truth: { regex: /half truth/gi, ui: { label: "half truth", toLabel: "", copy: "", paste: "", mw: "half-truth", copyLabels: true}, type: IssueType.SP},
  halfwit: { regex: /halfwit/gi, ui: { label: "halfwit", toLabel: "", copy: "", paste: "", mw: "half-wit", copyLabels: true}, type: IssueType.SP},
  hand_in_hand: { regex: /hand-in-hand/gi, ui: { label: "hand-in-hand", toLabel: "", copy: "", paste: "", mw: "hand in hand", copyLabels: true}, type: IssueType.SP},
  hand_pick: { regex: /hand-pick/gi, ui: { label: "hand-pick", toLabel: "", copy: "", paste: "", mw: "handpick", copyLabels: true}, type: IssueType.SP},
  hard_and_fast: { regex: /hard and fast/gi, ui: { label: "hard and fast", toLabel: "", copy: "hard and fast", paste: "hard-and-fast", mw: "hard-and-fast", copyLabels: false}, type: IssueType.SP},
  hardpressed: { regex: /hardpressed/gi, ui: { label: "hardpressed", toLabel: "", copy: "", paste: "", mw: "hard-pressed", copyLabels: true}, type: IssueType.SP},
  hard_working: { regex: /hard-working/gi, ui: { label: "hard-working", toLabel: "", copy: "", paste: "", mw: "hardworking", copyLabels: true}, type: IssueType.SP},
  head_on: { regex: /\bhead on\b/gi, ui: { label: "head on", toLabel: "", copy: "\\bhead on\\b", paste: "head-on", mw: "head-on", copyLabels: false}, type: IssueType.SP},
  head_scratcher: { regex: /head scratcher/gi, ui: { label: "head scratcher", toLabel: "", copy: "", paste: "", mw: "head-scratcher", copyLabels: true}, type: IssueType.SP},
  heroin: { regex: /heroin[^e]/gi, ui: { label: "heroin (heroine?)", toLabel: "", copy: "heroin\\e", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  high_five: { regex: /high five/gi, ui: { label: "high five (noun)", toLabel: "", copy: "high five", paste: "", mw: "high five", copyLabels: false}, type: IssueType.SP},
  high_five2: { regex: /high-five/gi, ui: { label: "high-five (verb)", toLabel: "", copy: "high-five", paste: "", mw: "high-five", copyLabels: false}, type: IssueType.SP},
  higher_ups: { regex: /higher ups/gi, ui: { label: "higher ups", toLabel: "", copy: "", paste: "", mw: "higher-up", copyLabels: true}, type: IssueType.SP},
  high_performance: { regex: /high-performance/gi, ui: { label: "high-performance", toLabel: "", copy: "", paste: "", mw: "high performance", copyLabels: true}, type: IssueType.SP},
  high_schooler: { regex: /high-schooler/gi, ui: { label: "high-schooler", toLabel: "", copy: "", paste: "", mw: "high schooler", copyLabels: true}, type: IssueType.SP},
  hitman: { regex: /hitman/gi, ui: { label: "hitman", toLabel: "", copy: "", paste: "", mw: "hit man", copyLabels: true}, type: IssueType.SP},
  home_made: { regex: /home-made/gi, ui: { label: "home-made", toLabel: "", copy: "", paste: "", mw: "homemade", copyLabels: true}, type: IssueType.SP},
  home_sick: { regex: /home sick/gi, ui: { label: "home sick", toLabel: "", copy: "home sick", paste: "homesick", mw: "homesick", copyLabels: false}, type: IssueType.SP},
  home_sick2: { regex: /home-sick/gi, ui: { label: "home-sick", toLabel: "", copy: "", paste: "", mw: "homesick", copyLabels: true}, type: IssueType.SP},
  human_like: { regex: /human-like/gi, ui: { label: "human-like", toLabel: "", copy: "", paste: "", mw: "humanlike", copyLabels: true}, type: IssueType.SP},
  ice_cream_cone: { regex: /ice cream cone/gi, ui: { label: "ice cream cone", toLabel: "", copy: "", paste: "", mw: "ice-cream cone", copyLabels: true}, type: IssueType.SP},
  icepack: { regex: /icepack/gi, ui: { label: "icepack", toLabel: "", copy: "", paste: "", mw: "ice pack", copyLabels: true}, type: IssueType.SP},
  iron_clad: { regex: /iron-clad/gi, ui: { label: "iron-clad", toLabel: "", copy: "", paste: "", mw: "ironclad", copyLabels: true}, type: IssueType.SP},
  iron_fisted: { regex: /iron-fisted/gi, ui: { label: "iron-fisted", toLabel: "", copy: "", paste: "", mw: "ironfisted", copyLabels: true}, type: IssueType.SP},
  judge: { regex: /judgement/gi, ui: { label: "judgement", toLabel: "", copy: "", paste: "", mw: "judgment", copyLabels: true}, type: IssueType.SP},
  jungle_like: { regex: /jungle-like/gi, ui: { label: "jungle-like", toLabel: "", copy: "", paste: "", mw: "junglelike", copyLabels: true}, type: IssueType.SP},
  kickstart: { regex: /kickstart/gi, ui: { label: "kickstart", toLabel: "", copy: "", paste: "", mw: "kick-start", copyLabels: true}, type: IssueType.SP},
  kind_hearted: { regex: /kind-hearted/gi, ui: { label: "kind-hearted", toLabel: "", copy: "", paste: "", mw: "kindhearted", copyLabels: true}, type: IssueType.SP},
  kind_hearted2: { regex: /kind hearted/gi, ui: { label: "kind hearted", toLabel: "", copy: "", paste: "", mw: "kindhearted", copyLabels: true}, type: IssueType.SP},
  knock_off: { regex: /knock-off/gi, ui: { label: "knock-off", toLabel: "", copy: "", paste: "", mw: "knockoff", copyLabels: true}, type: IssueType.SP},
  knowhow: { regex: /knowhow/gi, ui: { label: "knowhow", toLabel: "", copy: "", paste: "", mw: "know-how", copyLabels: true}, type: IssueType.SP},
  laidback: { regex: /laidback/gi, ui: { label: "laidback", toLabel: "", copy: "", paste: "", mw: "laid-back", copyLabels: true}, type: IssueType.SP},
  landmine: { regex: /landmine/gi, ui: { label: "landmine", toLabel: "", copy: "", paste: "", mw: "land mine", copyLabels: true}, type: IssueType.SP},
  last_ditch: { regex: /last ditch/gi, ui: { label: "last ditch (noun)", toLabel: "", copy: "", paste: "", mw: "last ditch", copyLabels: false}, type: IssueType.SP},
  last_ditch2: { regex: /last-ditch/gi, ui: { label: "last-ditch (adjective)", toLabel: "", copy: "", paste: "", mw: "last-ditch", copyLabels: false}, type: IssueType.SP},
  laugh1: { regex: /haha/gi, ui: { label: "haha", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  laugh2: { regex: /heehee/gi, ui: { label: "heehee", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  lead: { regex: /\blead\b/gi, ui: { label: "lead (should be led, past tense?)", toLabel: "", copy: "\\blead\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  let_down: { regex: /let-down/gi, ui: { label: "let-down", toLabel: "", copy: "", paste: "", mw: "letdown", copyLabels: true}, type: IssueType.SP},
  life_and_death: { regex: /life and death/gi, ui: { label: "life and death", toLabel: "", copy: "life and death", paste: "life-and-death", mw: "life-and-death", copyLabels: false}, type: IssueType.SP},
  life_blood: { regex: /life-blood/gi, ui: { label: "life-blood", toLabel: "", copy: "", paste: "", mw: "lifeblood", copyLabels: true}, type: IssueType.SP},
  life_form: { regex: /life form/gi, ui: { label: "life form", toLabel: "", copy: "", paste: "", mw: "life-form", copyLabels: true}, type: IssueType.SP},
  lifeform: { regex: /lifeform/gi, ui: { label: "lifeform", toLabel: "", copy: "", paste: "", mw: "life-form", copyLabels: true}, type: IssueType.SP},
  life_span: { regex: /life-span/gi, ui: { label: "life-span", toLabel: "", copy: "", paste: "", mw: "life span", copyLabels: true}, type: IssueType.SP},
  lifespan: { regex: /lifespan/gi, ui: { label: "lifespan", toLabel: "", copy: "", paste: "", mw: "life span", copyLabels: true}, type: IssueType.SP},
  life_threatening: { regex: /life threatening/gi, ui: { label: "life threatening", toLabel: "", copy: "", paste: "", mw: "life-threatening", copyLabels: true}, type: IssueType.SP},
  light_headed: { regex: /light headed/gi, ui: { label: "light headed", toLabel: "", copy: "", paste: "", mw: "light-headed", copyLabels: true}, type: IssueType.SP},
  lightheaded: { regex: /lightheaded/gi, ui: { label: "lightheaded", toLabel: "", copy: "", paste: "", mw: "light-headed", copyLabels: true}, type: IssueType.SP},
  light_hearted: { regex: /light-hearted/gi, ui: { label: "light-hearted", toLabel: "", copy: "", paste: "", mw: "lighthearted", copyLabels: true}, type: IssueType.SP},
  light_hearted2: { regex: /light hearted/gi, ui: { label: "light hearted", toLabel: "", copy: "", paste: "", mw: "lighthearted", copyLabels: true}, type: IssueType.SP},
  light_weight: { regex: /light-weight/gi, ui: { label: "light-weight", toLabel: "", copy: "", paste: "", mw: "lightweight", copyLabels: true}, type: IssueType.SP},
  line_up: { regex: /line-up/gi, ui: { label: "line-up", toLabel: "", copy: "", paste: "", mw: "lineup", copyLabels: true}, type: IssueType.SP},
  liquif: { regex: /liquif(y|ied)/gi, ui: { label: "liquif(y, ied)", toLabel: "", copy: "liquif(y|ied)", paste: "", mw: "liquefy", copyLabels: false}, type: IssueType.SP},
  longshot: { regex: /longshot/gi, ui: { label: "longshot", toLabel: "", copy: "", paste: "", mw: "long shot", copyLabels: true}, type: IssueType.SP},
  long_shot: { regex: /long-shot/gi, ui: { label: "long-shot", toLabel: "", copy: "", paste: "", mw: "long shot", copyLabels: true}, type: IssueType.SP},
  long_time: { regex: /long-time/gi, ui: { label: "long-time", toLabel: "", copy: "", paste: "", mw: "longtime", copyLabels: true}, type: IssueType.SP},
  lookalike: { regex: /lookalike/gi, ui: { label: "lookalike", toLabel: "", copy: "", paste: "", mw: "look-alike", copyLabels: true}, type: IssueType.SP},
  love_struck: { regex: /love-struck/gi, ui: { label: "love-struck", toLabel: "", copy: "", paste: "", mw: "lovestruck", copyLabels: true}, type: IssueType.SP},
  lunchbox: { regex: /lunchbox/gi, ui: { label: "lunchbox", toLabel: "", copy: "", paste: "", mw: "lunch box", copyLabels: true}, type: IssueType.SP},
  keychain: { regex: /keychain/gi, ui: { label: "keychain", toLabel: "", copy: "", paste: "", mw: "key chain", copyLabels: true}, type: IssueType.SP},
  lightbulb: { regex: /lightbulb/gi, ui: { label: "lightbulb", toLabel: "", copy: "", paste: "", mw: "light bulb", copyLabels: true}, type: IssueType.SP},
  make_due: { regex: /make due/gi, ui: { label: "make due", toLabel: "", copy: "", paste: "", mw: "make do", copyLabels: true}, type: IssueType.SP},
  make_up: { regex: /make-up/gi, ui: { label: "make-up", toLabel: "", copy: "", paste: "", mw: "makeup", copyLabels: true}, type: IssueType.SP},
  manmade: { regex: /manmade/gi, ui: { label: "manmade", toLabel: "", copy: "", paste: "", mw: "man-made", copyLabels: true}, type: IssueType.SP},
  manpower: { regex: /manpower/gi, ui: { label: "manpower", toLabel: "", copy: "", paste: "", mw: "man power", copyLabels: true}, type: IssueType.SP},
  mask_like: { regex: /mask-like/gi, ui: { label: "mask-like", toLabel: "", copy: "", paste: "", mw: "masklike", copyLabels: true}, type: IssueType.SP},
  mass_produce: { regex: /mass produce/gi, ui: { label: "mass produce", toLabel: "", copy: "", paste: "", mw: "mass-produce", copyLabels: true}, type: IssueType.SP},
  mass_producing: { regex: /mass producing/gi, ui: { label: "mass producing", toLabel: "", copy: "", paste: "", mw: "mass-produce", copyLabels: true}, type: IssueType.SP},
  mass_production: { regex: /mass-production/gi, ui: { label: "mass-production", toLabel: "", copy: "", paste: "", mw: "mass production", copyLabels: true}, type: IssueType.SP},
  meagre: { regex: /meagre/gi, ui: { label: "meagre", toLabel: "", copy: "", paste: "", mw: "meager", copyLabels: true}, type: IssueType.SP},
  mid_air: { regex: /mid-air/gi, ui: { label: "mid-air", toLabel: "", copy: "", paste: "", mw: "midair", copyLabels: true}, type: IssueType.SP},
  mid_morning: { regex: /mid-morning/i, ui: { label: "mid-morning", toLabel: "", copy: "", paste: "", mw: "midmorning", copyLabels: true}, type: IssueType.SP},
  mid_point: { regex: /mid-point/gi, ui: { label: "mid-point", toLabel: "", copy: "", paste: "", mw: "midpoint", copyLabels: true}, type: IssueType.SP},
  mid_section: { regex: /mid-section/gi, ui: { label: "mid-section", toLabel: "", copy: "", paste: "", mw: "midsection", copyLabels: true}, type: IssueType.SP},
  mid_sentence: { regex: /mid-sentence/gi, ui: { label: "mid-sentence", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  mid_forties: { regex: /mid-forties/gi, ui: { label: "mid-forties", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  mid_thirties: { regex: /mid-thirties/gi, ui: { label: "mid-thirties", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  mid_twenties: { regex: /mid-twenties/gi, ui: { label: "mid-twenties", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  mini_car: { regex: /mini-car/gi, ui: { label: "mini-car", toLabel: "", copy: "", paste: "", mw: "minicar", copyLabels: true}, type: IssueType.SP},
  miniscule: { regex: /miniscule/gi, ui: { label: "miniscule", toLabel: "", copy: "", paste: "", mw: "minuscule", copyLabels: true}, type: IssueType.SP},
  mischevious: { regex: /mischevious/gi, ui: { label: "mischevious", toLabel: "", copy: "", paste: "", mw: "mischievous", copyLabels: true}, type: IssueType.SP},
  month_long: { regex: /month-long/gi, ui: { label: "month-long", toLabel: "", copy: "", paste: "", mw: "monthlong", copyLabels: true}, type: IssueType.SP},
  mothership: { regex: /mothership/gi, ui: { label: "mothership", toLabel: "", copy: "", paste: "", mw: "mother ship", copyLabels: true}, type: IssueType.SP},
  moustache: { regex: /moustache/gi, ui: { label: "moustache", toLabel: "", copy: "", paste: "", mw: "mustache", copyLabels: true}, type: IssueType.SP},
  naive: { regex: /naïve/gi, ui: { label: "naïve", toLabel: "", copy: "", paste: "", mw: "naive", copyLabels: true}, type: IssueType.SP},
  name_drop: { regex: /name drop/gi, ui: { label: "name drop", toLabel: "", copy: "", paste: "", mw: "name-drop", copyLabels: true}, type: IssueType.SP},
  neverending: { regex: /neverending/gi, ui: { label: "neverending", toLabel: "", copy: "", paste: "", mw: "never-ending", copyLabels: true}, type: IssueType.SP},
  nm: { regex: /nevermind/gi, ui: { label: "nevermind", toLabel: "", copy: "", paste: "", mw: "never mind", copyLabels: true}, type: IssueType.SP},
  non_answer: { regex: /non-answer/gi, ui: { label: "non-answer", toLabel: "", copy: "", paste: "", mw: "nonanswer", copyLabels: true}, type: IssueType.SP},
  non_combatant: { regex: /non-combatant/gi, ui: { label: "non-combatant", toLabel: "", copy: "", paste: "", mw: "noncombatant", copyLabels: true}, type: IssueType.SP},
  non_committal: { regex: /non-committal/gi, ui: { label: "non-committal", toLabel: "", copy: "", paste: "", mw: "noncommittal", copyLabels: true}, type: IssueType.SP},
  non_confrontational: { regex: /non-confrontational/gi, ui: { label: "non-confrontational", toLabel: "", copy: "", paste: "", mw: "nonconfrontational", copyLabels: true}, type: IssueType.SP},
  non_existent: { regex: /non-existent/gi, ui: { label: "non-existent", toLabel: "", copy: "", paste: "", mw: "nonexistent", copyLabels: true}, type: IssueType.SP},
  non_hero: { regex: /non-hero/gi, ui: { label: "non-hero", toLabel: "", copy: "", paste: "", mw: "nonhero", copyLabels: true}, type: IssueType.SP},
  non_living: { regex: /non-living/gi, ui: { label: "non-living", toLabel: "", copy: "", paste: "", mw: "nonliving", copyLabels: true}, type: IssueType.SP},
  non_participant: { regex: /non-participant/gi, ui: { label: "non-participant", toLabel: "", copy: "", paste: "", mw: "nonparticipant", copyLabels: true}, type: IssueType.SP},
  non_sequitur: { regex: /non-sequitur/gi, ui: { label: "non-sequitur", toLabel: "", copy: "", paste: "", mw: "non sequitur", copyLabels: true}, type: IssueType.SP},
  nonsequitur: { regex: /nonsequitur/gi, ui: { label: "nonsequitur", toLabel: "", copy: "", paste: "", mw: "non sequitur", copyLabels: true}, type: IssueType.SP},
  non_stop: { regex: /non-stop/gi, ui: { label: "non-stop", toLabel: "", copy: "", paste: "", mw: "nonstop", copyLabels: true}, type: IssueType.SP},
  non_zero: { regex: /non-zero/gi, ui: { label: "non-zero", toLabel: "", copy: "", paste: "", mw: "nonzero", copyLabels: true}, type: IssueType.SP},
  notetaking: { regex: /notetaking/gi, ui: { label: "notetaking", toLabel: "", copy: "", paste: "", mw: "note-taking", copyLabels: true}, type: IssueType.SP},
  note_taking: { regex: /note taking/gi, ui: { label: "note taking", toLabel: "", copy: "", paste: "", mw: "note-taking", copyLabels: true}, type: IssueType.SP},
  number_one: { regex: /number-one/gi, ui: { label: "number-one", toLabel: "", copy: "", paste: "", mw: "number one", copyLabels: true}, type: IssueType.SP},
  ocher: { regex: /ochre/gi, ui: { label: "ochre", toLabel: "", copy: "", paste: "", mw: "ocher", copyLabels: true}, type: IssueType.SP},
  occured: { regex: /occured/gi, ui: { label: "occured", toLabel: "", copy: "", paste: "", mw: "occur", copyLabels: true}, type: IssueType.SP},
  occuring: { regex: /occuring/gi, ui: { label: "occuring", toLabel: "", copy: "", paste: "", mw: "occur", copyLabels: true}, type: IssueType.SP},
  offence: { regex: /offence/gi, ui: { label: "offence", toLabel: "", copy: "", paste: "", mw: "offense", copyLabels: true}, type: IssueType.SP},
  off_balance: { regex: /off balance/gi, ui: { label: "off balance", toLabel: "", copy: "", paste: "", mw: "off-balance", copyLabels: true}, type: IssueType.SP},
  off_duty: { regex: /off-duty/gi, ui: { label: "off-duty", toLabel: "", copy: "", paste: "", mw: "off duty", copyLabels: true}, type: IssueType.SP},
  off_guard: { regex: /off-guard/gi, ui: { label: "off-guard", toLabel: "", copy: "", paste: "", mw: "off guard", copyLabels: true}, type: IssueType.SP},
  off_handed: { regex: /off-handed/gi, ui: { label: "off-handed", toLabel: "", copy: "", paste: "", mw: "offhanded", copyLabels: true}, type: IssueType.SP},
  offload: { regex: /offload/gi, ui: { label: "offload", toLabel: "", copy: "", paste: "", mw: "off-load", copyLabels: true}, type: IssueType.SP},
  omelette: { regex: /omelette/gi, ui: { label: "omelette", toLabel: "", copy: "", paste: "", mw: "omelet", copyLabels: true}, type: IssueType.SP},
  on_screen: { regex: /on screen/gi, ui: { label: "on screen", toLabel: "", copy: "", paste: "", mw: "on-screen", copyLabels: true}, type: IssueType.SP},
  onscreen: { regex: /onscreen/gi, ui: { label: "onscreen", toLabel: "", copy: "", paste: "", mw: "on-screen", copyLabels: true}, type: IssueType.SP},
  on_stage: { regex: /on-stage/gi, ui: { label: "on-stage", toLabel: "", copy: "", paste: "", mw: "onstage", copyLabels: true}, type: IssueType.SP},
  on_stage2: { regex: /on stage/gi, ui: { label: "on stage", toLabel: "", copy: "", paste: "", mw: "onstage", copyLabels: true}, type: IssueType.SP},
  one_time: { regex: /one-time/gi, ui: { label: "one-time", toLabel: "", copy: "", paste: "", mw: "onetime", copyLabels: true}, type: IssueType.SP},
  over_excited: { regex: /over-excited/gi, ui: { label: "over-excited", toLabel: "", copy: "", paste: "", mw: "overexcited", copyLabels: true}, type: IssueType.SP},
  over_extend: { regex: /over-extend/gi, ui: { label: "over-extend", toLabel: "", copy: "", paste: "", mw: "overextend", copyLabels: true}, type: IssueType.SP},
  over_familiar: { regex: /over-familiar/gi, ui: { label: "over-familiar", toLabel: "", copy: "", paste: "", mw: "overfamiliar", copyLabels: true}, type: IssueType.SP},
  over_prepared: { regex: /over-prepared/gi, ui: { label: "over-prepared", toLabel: "", copy: "", paste: "", mw: "overprepared", copyLabels: true}, type: IssueType.SP},
  over_protect: { regex: /over-protect/gi, ui: { label: "over-protect", toLabel: "", copy: "", paste: "", mw: "overprotect", copyLabels: true}, type: IssueType.SP},
  part_timer: { regex: /part timer/gi, ui: { label: "part timer", toLabel: "", copy: "", paste: "", mw: "part-timer", copyLabels: true}, type: IssueType.SP},
  paper_mache: { regex: /paper mache/gi, ui: { label: "paper mache", toLabel: "", copy: "paper mache", paste: "", mw: "paper-mache", copyLabels: false}, type: IssueType.SP},
  phase: { regex: /phase/gi, ui: { label: "phase", toLabel: "", copy: "phase", paste: "faze", mw: "faze", copyLabels: false}, type: IssueType.SP},
  photoshoot: { regex: /photoshoot/gi, ui: { label: "photoshoot", toLabel: "", copy: "", paste: "", mw: "photo shoot", copyLabels: true}, type: IssueType.SP},
  piecede: { regex: /piece de resistance/gi, ui: { label: "piece de resistance", toLabel: "", copy: "", paste: "", mw: "pièce de résistance", copyLabels: true}, type: IssueType.SP},
  pipsqueak: { regex: /pipsqueak/gi, ui: { label: "pipsqueak", toLabel: "", copy: "", paste: "", mw: "pip-squeak", copyLabels: true}, type: IssueType.SP},
  plain_clothes: { regex: /plain-clothes/gi, ui: { label: "plain-clothes", toLabel: "", copy: "", paste: "", mw: "plainclothes", copyLabels: true}, type: IssueType.SP},
  plantlife: { regex: /plantlife/gi, ui: { label: "plantlife", toLabel: "", copy: "", paste: "", mw: "plant life", copyLabels: true}, type: IssueType.SP},
  plough: { regex: /plough/gi, ui: { label: "plough", toLabel: "", copy: "", paste: "", mw: "plow", copyLabels: true}, type: IssueType.SP},
  point_blank: { regex: /point blank/gi, ui: { label: "point blank", toLabel: "", copy: "", paste: "", mw: "point-blank", copyLabels: true}, type: IssueType.SP},
  power_walk: { regex: /power-walk/gi, ui: { label: "power-walk", toLabel: "", copy: "", paste: "", mw: "power walk", copyLabels: true}, type: IssueType.SP},
  principal: { regex: /principal/gi, ui: { label: "principal (head of a school)", toLabel: "", copy: "principal", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  principle: { regex: /principle/gi, ui: { label: "principle (concept)", toLabel: "", copy: "principle", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  psych: { regex: /psych[^e]\b/gi, ui: { label: "psych (verb)", toLabel: "", copy: "\\bpsych[^e]\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  psyche: { regex: /\bpsyche/gi, ui: { label: "psyche (noun)", toLabel: "", copy: "\\bpsyche", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  pubic: { regex: /pubic/gi, ui: { label: "pubic (public?)", toLabel: "", copy: "pubic", paste: "", mw: "", copyLabels: false}, type: IssueType.SP},
  publically: { regex: /publically/gi, ui: { label: "publically", toLabel: "", copy: "", paste: "", mw: "publicly", copyLabels: true}, type: IssueType.SP},
  punchline: { regex: /punchline/gi, ui: { label: "punchline", toLabel: "", copy: "", paste: "", mw: "punch line", copyLabels: true}, type: IssueType.SP},
  punch_line: { regex: /punch-line/gi, ui: { label: "punch-line", toLabel: "", copy: "", paste: "", mw: "punch line", copyLabels: true}, type: IssueType.SP},
  puppet_like: { regex: /puppet-like/gi, ui: { label: "puppet-like", toLabel: "", copy: "", paste: "", mw: "puppetlike", copyLabels: true}, type: IssueType.SP},
  pureblooded: { regex: /pureblooded/gi, ui: { label: "pureblooded", toLabel: "", copy: "", paste: "", mw: "pure-blooded", copyLabels: true}, type: IssueType.SP},
  pushup: { regex: /pushup/gi, ui: { label: "pushup", toLabel: "", copy: "", paste: "", mw: "push-up", copyLabels: true}, type: IssueType.SP},
  ragdoll: { regex: /ragdoll/gi, ui: { label: "ragdoll", toLabel: "", copy: "", paste: "", mw: "rag doll", copyLabels: true}, type: IssueType.SP},
  rag_tag: { regex: /rag-tag/gi, ui: { label: "rag-tag", toLabel: "", copy: "", paste: "", mw: "ragtag", copyLabels: true}, type: IssueType.SP},
  railgun: { regex: /railgun/gi, ui: { label: "railgun", toLabel: "", copy: "", paste: "", mw: "rail gun", copyLabels: true}, type: IssueType.SP},
  rear_view_mirror: { regex: /rear view mirror/gi, ui: { label: "rear view mirror", toLabel: "", copy: "", paste: "", mw: "rearview mirror", copyLabels: true}, type: IssueType.SP},
  rear_view_mirror2: { regex: /rear-view mirror/gi, ui: { label: "rear-view mirror", toLabel: "", copy: "", paste: "", mw: "rearview mirror", copyLabels: true}, type: IssueType.SP},
  re_absorb: { regex: /re-absorb/gi, ui: { label: "re-absorb", toLabel: "", copy: "", paste: "", mw: "reabsorb", copyLabels: true}, type: IssueType.SP},
  re_categorize: { regex: /re-categorize/gi, ui: { label: "re-categorize", toLabel: "", copy: "", paste: "", mw: "recategorize", copyLabels: true}, type: IssueType.SP},
  re_enact: { regex: /re-enact/gi, ui: { label: "re-enact", toLabel: "", copy: "", paste: "", mw: "reenact", copyLabels: true}, type: IssueType.SP},
  re_evaluate: { regex: /re-evaluate/gi, ui: { label: "re-evaluate", toLabel: "", copy: "", paste: "", mw: "reevaluate", copyLabels: true}, type: IssueType.SP},
  re_examine: { regex: /re-examine/gi, ui: { label: "re-examine", toLabel: "", copy: "", paste: "", mw: "reexamine", copyLabels: true}, type: IssueType.SP},
  red_faced: { regex: /red faced/gi, ui: { label: "red faced", toLabel: "", copy: "", paste: "", mw: "red-faced", copyLabels: true}, type: IssueType.SP},
  ribcage: { regex: /ribcage/gi, ui: { label: "ribcage", toLabel: "", copy: "", paste: "", mw: "rib cage", copyLabels: true}, type: IssueType.SP},
  rip: { regex: /\br\.i\.p\.?\b/gi, ui: { label: "R.I.P", toLabel: "", copy: "", paste: "", mw: "RIP", copyLabels: true}, type: IssueType.SP},
  risque: { regex: /risque/gi, ui: { label: "risque", toLabel: "", copy: "", paste: "", mw: "risqué", copyLabels: true}, type: IssueType.SP},
  river_bank: { regex: /river bank/gi, ui: { label: "river bank", toLabel: "", copy: "", paste: "", mw: "riverbank", copyLabels: true}, type: IssueType.SP},
  river_bank2: { regex: /river-bank/gi, ui: { label: "river-bank", toLabel: "", copy: "", paste: "", mw: "riverbank", copyLabels: true}, type: IssueType.SP},
  role_play: { regex: /role play/gi, ui: { label: "role play", toLabel: "", copy: "role play", paste: "role-play", mw: "role-play", copyLabels: false}, type: IssueType.SP},
  roleplay: { regex: /roleplay/gi, ui: { label: "roleplay", toLabel: "", copy: "", paste: "", mw: "role-play", copyLabels: true}, type: IssueType.SP},
  rough_and_tumble: { regex: /rough and tumble/gi, ui: { label: "rough and tumble", toLabel: "", copy: "", paste: "", mw: "rough-and-tumble", copyLabels: true}, type: IssueType.SP},
  round_robin: { regex: /round robin/gi, ui: { label: "round robin", toLabel: "", copy: "", paste: "", mw: "round-robin", copyLabels: true}, type: IssueType.SP},
  rundown: { regex: /rundown/gi, ui: { label: "rundown (noun)", toLabel: "", copy: "rundown", paste: "", mw: "rundown", copyLabels: false}, type: IssueType.SP},
  run_down: { regex: /run-down/gi, ui: { label: "run-down (adjective)", toLabel: "", copy: "run-down", paste: "", mw: "run-down", copyLabels: false}, type: IssueType.SP},
  run_down2: { regex: /run down/gi, ui: { label: "run down (verb)", toLabel: "", copy: "run down", paste: "", mw: "run down", copyLabels: false}, type: IssueType.SP},
  run_in: { regex: /run in\b/gi, ui: { label: "run in (verb)", toLabel: "", copy: "run in\\b", paste: "", mw: "run in", copyLabels: false}, type: IssueType.SP},
  run_in2: { regex: /run-in/gi, ui: { label: "run-in (noun)", toLabel: "", copy: "run-in", paste: "", mw: "run-in", copyLabels: false}, type: IssueType.SP},
  saute: { regex: /saute/gi, ui: { label: "saute", toLabel: "", copy: "", paste: "", mw: "sauté", copyLabels: true}, type: IssueType.SP},
  saw_like: { regex: /saw-like/gi, ui: { label: "saw-like", toLabel: "", copy: "", paste: "", mw: "sawlike", copyLabels: true}, type: IssueType.SP},
  seatbelt: { regex: /seatbelt/gi, ui: { label: "seatbelt", toLabel: "", copy: "", paste: "", mw: "seat belt", copyLabels: true}, type: IssueType.SP},
  sea_water: { regex: /sea water/gi, ui: { label: "sea water", toLabel: "", copy: "", paste: "", mw: "seawater", copyLabels: true}, type: IssueType.SP},
  second_guess: { regex: /second guess/gi, ui: { label: "second guess", toLabel: "", copy: "", paste: "", mw: "second-guess", copyLabels: true}, type: IssueType.SP},
  second_hand: { regex: /second-hand/gi, ui: { label: "second-hand", toLabel: "", copy: "", paste: "", mw: "secondhand", copyLabels: true}, type: IssueType.SP},
  self_expression: { regex: /self expression/gi, ui: { label: "self expression", toLabel: "", copy: "", paste: "", mw: "self-expression", copyLabels: true}, type: IssueType.SP},
  semi_circle: { regex: /semi-circle/gi, ui: { label: "semi-circle", toLabel: "", copy: "", paste: "", mw: "semicircle", copyLabels: true}, type: IssueType.SP},
  semi_translucent: { regex: /semi-translucent/gi, ui: { label: "semi-translucent", toLabel: "", copy: "", paste: "", mw: "semitranslucent", copyLabels: true}, type: IssueType.SP},
  semi_transparent: { regex: /semi-transparent/gi, ui: { label: "semi-transparent", toLabel: "", copy: "", paste: "", mw: "semitransparent", copyLabels: true}, type: IssueType.SP},
  semi_truck: { regex: /semi truck/gi, ui: { label: "semi truck", toLabel: "", copy: "", paste: "", mw: "semitruck", copyLabels: true}, type: IssueType.SP},
  semi_truck2: { regex: /semi-truck/gi, ui: { label: "semi-truck", toLabel: "", copy: "", paste: "", mw: "semitruck", copyLabels: true}, type: IssueType.SP},
  shapeshift: { regex: /shapeshift/gi, ui: { label: "shapeshift", toLabel: "", copy: "", paste: "", mw: "shape-shift", copyLabels: true}, type: IssueType.SP},
  sheath: { regex: /sheath[^e]/gi, ui: { label: "sheath (noun)", toLabel: "", copy: "sheath[^e]", paste: "", mw: "sheath", copyLabels: false}, type: IssueType.SP},
  sheathe: { regex: /sheathe/gi, ui: { label: "sheathe (verb)", toLabel: "", copy: "sheathe", paste: "", mw: "sheathe", copyLabels: false}, type: IssueType.SP},
  shockwave: { regex: /shockwave/gi, ui: { label: "shockwave", toLabel: "", copy: "", paste: "", mw: "shock wave", copyLabels: true}, type: IssueType.SP},
  short_sighted: { regex: /short-sighted/gi, ui: { label: "short-sighted", toLabel: "", copy: "", paste: "", mw: "shortsighted", copyLabels: true}, type: IssueType.SP},
  shuteye: { regex: /shuteye/gi, ui: { label: "shuteye", toLabel: "", copy: "", paste: "", mw: "shut-eye", copyLabels: true}, type: IssueType.SP},
  side_by_side: { regex: /side by side/gi, ui: { label: "side by side (adverb)", toLabel: "", copy: "side by side", paste: "", mw: "side by side", copyLabels: false}, type: IssueType.SP},
  side_by_side2: { regex: /side-by-side/gi, ui: { label: "side-by-side (adjective)", toLabel: "", copy: "", paste: "", mw: "shut-eye", copyLabels: false}, type: IssueType.SP},
  signalling: { regex: /signalling/gi, ui: { label: "signalling", toLabel: "", copy: "", paste: "", mw: "signal", copyLabels: true}, type: IssueType.SP},
  silk_like: { regex: /silk-like/gi, ui: { label: "silk-like", toLabel: "", copy: "", paste: "", mw: "silklike", copyLabels: true}, type: IssueType.SP},
  simple_minded: { regex: /simple-minded/gi, ui: { label: "simple-minded", toLabel: "", copy: "", paste: "", mw: "simpleminded", copyLabels: true}, type: IssueType.SP},
  single_file: { regex: /single-file/gi, ui: { label: "single-file", toLabel: "", copy: "", paste: "", mw: "single file", copyLabels: true}, type: IssueType.SP},
  singlehanded: { regex: /singlehanded/gi, ui: { label: "singlehanded", toLabel: "", copy: "", paste: "", mw: "single-handed", copyLabels: true}, type: IssueType.SP},
  singleminded: { regex: /singleminded/gi, ui: { label: "singleminded", toLabel: "", copy: "", paste: "", mw: "single-minded", copyLabels: true}, type: IssueType.SP},
  sizeable: { regex: /sizeable/gi, ui: { label: "sizeable", toLabel: "", copy: "", paste: "", mw: "sizable", copyLabels: true}, type: IssueType.SP},
  skillset: { regex: /skillset/gi, ui: { label: "skillset", toLabel: "", copy: "", paste: "", mw: "skill set", copyLabels: true}, type: IssueType.SP},
  slayed: { regex: /slayed/gi, ui: { label: "slayed (comedy?)", toLabel: "", copy: "slayed", paste: "slew", mw: "slay", copyLabels: false}, type: IssueType.SP},
  slip_up: { regex: /slip-up/gi, ui: { label: "slip-up", toLabel: "", copy: "", paste: "", mw: "slipup", copyLabels: true}, type: IssueType.SP},
  smokey: { regex: /smokey/gi, ui: { label: "smokey", toLabel: "", copy: "", paste: "", mw: "smoky", copyLabels: true}, type: IssueType.SP},
  smoulder: { regex: /smoulder/gi, ui: { label: "smoulder", toLabel: "", copy: "", paste: "", mw: "smolder", copyLabels: true}, type: IssueType.SP},
  smack_dab: { regex: /smack dab/gi, ui: { label: "smack dab", toLabel: "", copy: "", paste: "", mw: "smack-dab", copyLabels: true}, type: IssueType.SP},
  soft_hearted: { regex: /soft-hearted/gi, ui: { label: "soft-hearted", toLabel: "", copy: "", paste: "", mw: "softhearted", copyLabels: true}, type: IssueType.SP},
  soft_serve: { regex: /soft-serve/gi, ui: { label: "soft-serve", toLabel: "", copy: "", paste: "", mw: "soft serve", copyLabels: true}, type: IssueType.SP},
  soul: { regex: /soulmate/gi, ui: { label: "soulmate", toLabel: "", copy: "", paste: "", mw: "soul mate", copyLabels: true}, type: IssueType.SP},
  spine_like: { regex: /spine-like/gi, ui: { label: "spine-like", toLabel: "", copy: "", paste: "", mw: "spinelike", copyLabels: true}, type: IssueType.SP},
  standalone: { regex: /standalone/gi, ui: { label: "standalone", toLabel: "", copy: "", paste: "", mw: "stand-alone", copyLabels: true}, type: IssueType.SP},
  stand_out: { regex: /stand-out/gi, ui: { label: "stand-out", toLabel: "", copy: "", paste: "", mw: "standout", copyLabels: true}, type: IssueType.SP},
  stepping_stone: { regex: /stepping-stone/gi, ui: { label: "stepping-stone", toLabel: "", copy: "", paste: "", mw: "stepping stone", copyLabels: true}, type: IssueType.SP},
  storyline: { regex: /storyline/gi, ui: { label: "storyline", toLabel: "", copy: "", paste: "", mw: "story line", copyLabels: true}, type: IssueType.SP},
  strait: { regex: /straightlaced/gi, ui: { label: "straightlaced", toLabel: "", copy: "", paste: "", mw: "straitlaced", copyLabels: true}, type: IssueType.SP},
  sub_par: { regex: /sub-par/gi, ui: { label: "sub-par", toLabel: "", copy: "", paste: "", mw: "subpar", copyLabels: true}, type: IssueType.SP},
  sun_tan: { regex: /sun-tan/gi, ui: { label: "sun-tan", toLabel: "", copy: "", paste: "", mw: "suntan", copyLabels: true}, type: IssueType.SP},
  swiss: { regex: /swiss cheese/g, ui: { label: "swiss cheese", toLabel: "", copy: "", paste: "", mw: "Swiss cheese", copyLabels: true}, type: IssueType.SP},
  t_shirt: { regex: /t-shirt/g, ui: { label: "t-shirt", toLabel: "", copy: "", paste: "", mw: "T-shirt", copyLabels: true}, type: IssueType.SP},
  tastebud: { regex: /tastebud/gi, ui: { label: "tastebud", toLabel: "", copy: "", paste: "", mw: "taste bud", copyLabels: true}, type: IssueType.SP},
  tax_payer: { regex: /tax-payer/gi, ui: { label: "tax-payer", toLabel: "", copy: "", paste: "", mw: "taxpayer", copyLabels: true}, type: IssueType.SP},
  tax_paying: { regex: /tax-paying/gi, ui: { label: "tax-paying", toLabel: "", copy: "", paste: "", mw: "taxpaying", copyLabels: true}, type: IssueType.SP},
  tell_tale: { regex: /tell-tale/gi, ui: { label: "tell-tale", toLabel: "", copy: "", paste: "", mw: "telltale", copyLabels: true}, type: IssueType.SP},
  test_drive: { regex: /test drive/gi, ui: { label: "test drive", toLabel: "", copy: "", paste: "", mw: "test-drive", copyLabels: true}, type: IssueType.SP},
  testdrive: { regex: /testdrive/gi, ui: { label: "testdrive", toLabel: "", copy: "", paste: "", mw: "test-drive", copyLabels: true}, type: IssueType.SP},
  testrun: { regex: /testrun/gi, ui: { label: "testrun", toLabel: "", copy: "", paste: "", mw: "test run", copyLabels: true}, type: IssueType.SP},
  test_run: { regex: /test-run/gi, ui: { label: "test-run", toLabel: "", copy: "", paste: "", mw: "test run", copyLabels: true}, type: IssueType.SP},
  tete_a_tete: { regex: /tete-a-tete/gi, ui: { label: "tete-a-tete", toLabel: "", copy: "", paste: "", mw: "tête-à-tête", copyLabels: true}, type: IssueType.SP},
  thrusted: { regex: /thrusted/gi, ui: { label: "thrusted", toLabel: "", copy: "thrusted", paste: "thrust", mw: "thrust", copyLabels: false}, type: IssueType.SP},
  timeframe: { regex: /timeframe/gi, ui: { label: "timeframe", toLabel: "", copy: "", paste: "", mw: "time frame", copyLabels: true}, type: IssueType.SP},
  timestamp: { regex: /timestamp/gi, ui: { label: "timestamp", toLabel: "", copy: "", paste: "", mw: "time stamp", copyLabels: true}, type: IssueType.SP},
  time_worn: { regex: /time-worn/gi, ui: { label: "time-worn", toLabel: "", copy: "", paste: "", mw: "timeworn", copyLabels: true}, type: IssueType.SP},
  tipoff: { regex: /tipoff/gi, ui: { label: "tipoff", toLabel: "", copy: "", paste: "", mw: "tip-off", copyLabels: true}, type: IssueType.SP},
  top_secret: { regex: /top-secret/gi, ui: { label: "top-secret", toLabel: "", copy: "", paste: "", mw: "top secret", copyLabels: true}, type: IssueType.SP},
  travelling: { regex: /travelling/gi, ui: { label: "travelling", toLabel: "", copy: "", paste: "", mw: "travel", copyLabels: true}, type: IssueType.SP},
  travelled: { regex: /travelled/gi, ui: { label: "travelled", toLabel: "", copy: "", paste: "", mw: "travel", copyLabels: true}, type: IssueType.SP},
  traveller: { regex: /traveller/gi, ui: { label: "traveller", toLabel: "", copy: "", paste: "", mw: "traveler", copyLabels: true}, type: IssueType.SP},
  tried_and_true: { regex: /tried and true/gi, ui: { label: "tried and true", toLabel: "", copy: "tried and true", paste: "tried-and-true", mw: "tried-and-true", copyLabels: false}, type: IssueType.SP},
  twentyfourseven: { regex: /twenty-four-seven/gi, ui: { label: "twenty-four-seven", toLabel: "", copy: "", paste: "", mw: "twenty-four seven", copyLabels: true}, type: IssueType.SP},
  twin_tail: { regex: /twin tail/gi, ui: { label: "twin tail", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  twin_tail2: { regex: /twin-tail/gi, ui: { label: "twin-tail", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  twintail: { regex: /twintail/gi, ui: { label: "twintail", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP},
  uh_huh: { regex: /\buh huh/gi, ui: { label: "uh huh", toLabel: "", copy: "", paste: "", mw: "uh-huh", copyLabels: true}, type: IssueType.SP},
  underaged: { regex: /underaged/gi, ui: { label: "underaged", toLabel: "", copy: "", paste: "", mw: "underage", copyLabels: true}, type: IssueType.SP},
  unshakeable: { regex: /unshakeable/gi, ui: { label: "unshakeable", toLabel: "", copy: "", paste: "", mw: "unshakable", copyLabels: true}, type: IssueType.SP},
  upperhand: { regex: /upperhand/gi, ui: { label: "upperhand", toLabel: "", copy: "", paste: "", mw: "upper hand", copyLabels: true}, type: IssueType.SP},
  vice_like: { regex: /vice-like/gi, ui: { label: "vice-like", toLabel: "", copy: "", paste: "", mw: "viselike", copyLabels: true}, type: IssueType.SP},
  vicelike: { regex: /vicelike/gi, ui: { label: "vicelike", toLabel: "", copy: "", paste: "", mw: "viselike", copyLabels: true}, type: IssueType.SP},
  vice_versa: { regex: /vice-versa/gi, ui: { label: "vice-versa", toLabel: "", copy: "", paste: "", mw: "vice versa", copyLabels: true}, type: IssueType.SP},
  videogame: { regex: /videogame/gi, ui: { label: "videogame", toLabel: "", copy: "", paste: "", mw: "video game", copyLabels: true}, type: IssueType.SP},
  vocal_chord: { regex: /vocal chord/gi, ui: { label: "vocal chord", toLabel: "", copy: "", paste: "", mw: "vocal cord", copyLabels: true}, type: IssueType.SP},
  walkthrough: { regex: /walkthrough/gi, ui: { label: "walkthrough", toLabel: "", copy: "", paste: "", mw: "walk-through", copyLabels: true}, type: IssueType.SP},
  wash_bowl: { regex: /wash bowl/gi, ui: { label: "wash bowl", toLabel: "", copy: "wash bowl", paste: "washbowl", mw: "washbowl", copyLabels: false}, type: IssueType.SP},
  week_long: { regex: /week-long/gi, ui: { label: "week-long", toLabel: "", copy: "", paste: "", mw: "weeklong", copyLabels: true}, type: IssueType.SP},
  wellbeing: { regex: /wellbeing/gi, ui: { label: "wellbeing", toLabel: "", copy: "", paste: "", mw: "well-being", copyLabels: true}, type: IssueType.SP},
  wellkempt: { regex: /well-kempt/gi, ui: { label: "well-kempt", toLabel: "", copy: "", paste: "", mw: "well-kept", copyLabels: true}, type: IssueType.SP},
  wide_eyed: { regex: /wide eyed/gi, ui: { label: "wide eyed", toLabel: "", copy: "", paste: "", mw: "wide-eyed", copyLabels: true}, type: IssueType.SP},
  wide_spread: { regex: /wide-spread/gi, ui: { label: "wide-spread", toLabel: "", copy: "", paste: "", mw: "widespread", copyLabels: true}, type: IssueType.SP},
  willy_nilly: { regex: /willy nilly/gi, ui: { label: "willy nilly", toLabel: "", copy: "", paste: "", mw: "willy-nilly", copyLabels: true}, type: IssueType.SP},
  wishlist: { regex: /wishlist/gi, ui: { label: "wishlist", toLabel: "", copy: "", paste: "", mw: "wish list", copyLabels: true}, type: IssueType.SP},
  woah: { regex: /woah/gi, ui: { label: "woah", toLabel: "", copy: "", paste: "", mw: "whoa", copyLabels: true}, type: IssueType.SP},
  worshiping: { regex: /worshiping/gi, ui: { label: "worshiping", toLabel: "", copy: "", paste: "", mw: "worship", copyLabels: true}, type: IssueType.SP},
  worshiper: { regex: /worshiper/gi, ui: { label: "worshiper", toLabel: "", copy: "", paste: "", mw: "worshipper", copyLabels: true}, type: IssueType.SP},
  worst_case_scenario: { regex: /worst case scenario/gi, ui: { label: "worst case scenario", toLabel: "", copy: "", paste: "", mw: "worst-case", copyLabels: true}, type: IssueType.SP},
  yada_yada: { regex: /yada-yada/gi, ui: { label: "yada-yada", toLabel: "", copy: "", paste: "", mw: "yada yada", copyLabels: true}, type: IssueType.SP},
  year_long: { regex: /year-long/gi, ui: { label: "year-long", toLabel: "", copy: "", paste: "", mw: "yearlong", copyLabels: true}, type: IssueType.SP},
  afterwards: { regex: /afterwards/gi, ui: { label: "afterwards", toLabel: "", copy: "afterwards", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  afterward: { regex: /afterward($|[^s])/gi, ui: { label: "afterward", toLabel: "", copy: "afterward[^s]", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  anymore: { regex: /\banymore\b/gi, ui: { label: "anymore", toLabel: "", copy: "anymore", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  any_more: { regex: /\bany more\b/gi, ui: { label: "any more", toLabel: "", copy: "any more", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  further: { regex: /further/gi, ui: { label: "further", toLabel: "", copy: "further", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  farther: { regex: /farther/gi, ui: { label: "farther", toLabel: "", copy: "farther", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  leaped: { regex: /leaped/gi, ui: { label: "leaped", toLabel: "", copy: "leaped", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  leapt: { regex: /leapt/gi, ui: { label: "leapt", toLabel: "", copy: "leapt", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  towards: { regex: /towards/gi, ui: { label: "towards", toLabel: "", copy: "towards", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  toward: { regex: /toward($|[^s])/gi, ui: { label: "toward", toLabel: "", copy: "toward[^s]", paste: "", mw: "", copyLabels: false}, type: IssueType.SW},
  spaz: { regex: /\bspaz\b/gi, ui: { label: "spaz (slur?)", toLabel: "", copy: "spaz", paste: "", mw: "", copyLabels: false}, type: IssueType.SL},
  retard: { regex: /retard/gi, ui: { label: "retard (slur?)", toLabel: "", copy: "retard", paste: "", mw: "", copyLabels: false}, type: IssueType.SL},
  fuck: { regex: /fuck/gi, ui: { label: "fuck (curse word)", toLabel: "", copy: "fuck", paste: "", mw: "", copyLabels: false}, type: IssueType.SL},};

// variable is unused, but forces a type check
const unusedTypeCheck = idlessIssues as { [key: string]: Omit<Issue, "id"> };

type IdlessIssues = { [key in IssueId]: Omit<Issues[key], 'id'> };

function copyObjectIdsToValues(idlessIssues: IdlessIssues): Issues {
  const issues: Partial<Issues> = {};
  for (const key in idlessIssues) {
    const id = key as IssueId;
    issues[id] = { id, ...idlessIssues[id] as Omit<Issue, 'id'> };
  }
  return issues as Issues;
}

export const issues = copyObjectIdsToValues(idlessIssues);
