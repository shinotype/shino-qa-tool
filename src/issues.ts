export type IssueId = keyof typeof idlessIssues;
export type Issues = { [key in IssueId]: Issue };

export const IssueType = {
  PG: Symbol("punctuationAndGrammar"),
  SP: Symbol("spelling"),
  RW: Symbol("redundantWords"),
  SW: Symbol("similarWords"),
  SL: Symbol("slurs"),
}

export const StyleGuide = {
  JNC: Symbol("jnc"),
  YP: Symbol("yp"),
}

export interface Issue {
  id: IssueId,
  regex: RegExp,
  ui: {
    label: string,
    toLabel?: string,
    copy?: string,
    paste?: string,
    copyLabels?: boolean,
    mw?: string,
  }
  type: Symbol,
  styleGuides?: Symbol[],
}

const idlessIssues = {
  p_bang: { regex: /!\?/g, ui: { label: "!?", toLabel: "?!", copy: "!\\?", paste: "\\?!", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_bang2: { regex: /([^!]|^)!!([^!]|$)/g, ui: { label: "!!", toLabel: "! or !!!", copy: "([^!]|^)!!([^!]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_comma: { regex: /”,/gi, ui: { label: "Comma outside ”", toLabel: "", copy: "”,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_comma_and: { regex: /And,/g, ui: { label: "And,", toLabel: "(delete comma?)", copy: "And,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_but: { regex: /But,/g, ui: { label: "But,", toLabel: "(delete comma?)", copy: "But,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_either: { regex: /, either/gi, ui: { label: ", either", toLabel: "", copy: ", either", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.JNC]}, 
  p_comma_either2: { regex: /[^,] either/gi, ui: { label: "either", toLabel: "", copy: "[^,] either", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_now: { regex: /Now,/g, ui: { label: "Now,", toLabel: "", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_or: { regex: /Or,/g, ui: { label: "Or,", toLabel: "(delete comma?)", copy: "Or,", paste: "", mw: "", copyLabels: true}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_so: { regex: /So,/g, ui: { label: "So,", toLabel: "(delete comma?)", copy: "So,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_then: { regex: /Then,/g, ui: { label: "Then", toLabel: "(delete comma?)", copy: "Then,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_too: { regex: /, too\b/gi, ui: { label: ", too", toLabel: "", copy: ", too\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.JNC]}, 
  p_comma_too2: { regex: /[^,] too\b/gi, ui: { label: "too", toLabel: "", copy: "[^,] too\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma_yet: { regex: /Yet,/g, ui: { label: "Yet,", toLabel: "(delete comma?)", copy: "Yet,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_comma2: { regex: /’,/gi, ui: { label: "Comma outside ’", toLabel: "", copy: "’,", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_dash_double: { regex: /--/g, ui: { label: "-- (double hyphen)", toLabel: "", copy: "--", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_dash_em1: { regex: /— /g, ui: { label: "—[space]", toLabel: "", copy: "— ", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_dash_em2: { regex: / —/g, ui: { label: "[space]—", toLabel: "", copy: " —", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_dash_en: { regex: /–/g, ui: { label: "– (endash)", toLabel: "", copy: "–", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_ellipsis1: { regex: /\.\.\.\./g, ui: { label: "....", toLabel: "", copy: "\\.\\.\\.\\.", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_ellipsis2: { regex: /\.\.\. [a-z]/g, ui: { label: "... a", toLabel: "", copy: "\\.\\.\\. [a-z]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_ellipsis3: { regex: /\.\.\.[A-Z]/g, ui: { label: "...A", toLabel: "", copy: "\\.\\.\\.[A-Z]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_ellipsis4: { regex: /…/g, ui: { label: "… (symbol)", toLabel: "...", copy: "[\\u2026]", paste: "...", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.JNC]}, 
  p_ellipsis5: { regex: /\.\.\./g, ui: { label: "...", toLabel: "… (symbol)", copy: "\\.\\.\\.", paste: "…", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: [StyleGuide.YP]}, 
  p_period: { regex: /([^\.]|^)\.\.([^\.]|$)/g, ui: { label: "..", toLabel: ". or ...", copy: "([^\\.]|^)\\.\\.([^\\.]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_period2: { regex: /(^|[^\.])\.[?!$]/g, ui: { label: ". before ? or !", toLabel: "", copy: "[^\\.]\\.[?!$]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_period3: { regex: /[?!]\./g, ui: { label: ". after ? or !", toLabel: "", copy: "[?!]\\.", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_period4: { regex: /”\.([^\.])/gi, ui: { label: "Period outside ”", toLabel: "", copy: "”\\.([^\\.])", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_period5: { regex: /’\.([^\.])/gi, ui: { label: "Period outside ’", toLabel: "", copy: "’\\.([^\\.])", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_period6: { regex: /[^.][.?!] [a-z]/g, ui: { label: ". a", toLabel: "", copy: "[^.][.?!] [a-z]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_bout: { regex: /‘bout\b/gi, ui: { label: "‘bout", toLabel: "’bout", copy: "‘bout\\b", paste: "’bout", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_cause: { regex: /‘cause\b/gi, ui: { label: "‘cause", toLabel: "’cause", copy: "‘cause\\b", paste: "’cause", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_cept: { regex: /‘cept\b/gi, ui: { label: "‘cept", toLabel: "’cept", copy: "‘cept\\b", paste: "’cept", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_cuz: { regex: /‘cuz\b/gi, ui: { label: "‘cuz", toLabel: "’cuz", copy: "‘cuz\\b", paste: "’cuz", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_em: { regex: /‘em\b/gi, ui: { label: "‘em", toLabel: "’em", copy: "‘em\\b", paste: "’em", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_fore: { regex: /‘fore\b/gi, ui: { label: "‘fore", toLabel: "’fore", copy: "‘fore\\b", paste: "’fore", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_fraid: { regex: /‘fraid\b/gi, ui: { label: "‘fraid", toLabel: "’fraid", copy: "‘fraid\\b", paste: "’fraid", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_gainst: { regex: /‘gainst\b/gi, ui: { label: "‘gainst", toLabel: "’gainst", copy: "‘gainst\\b", paste: "’gainst", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_lil1: { regex: /\blil’/gi, ui: { label: "lil’", toLabel: "li’l", copy: "\\blil’\\b", paste: "li’l", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_lil2: { regex: /\blil\b/gi, ui: { label: "lil", toLabel: "li’l (?)", copy: "\\blil\\b", paste: "li’l ", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_neath: { regex: /‘neath\b/gi, ui: { label: "‘neath", toLabel: "’neath", copy: "‘neath\\b", paste: "’neath", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_nother: { regex: /‘nother\b/gi, ui: { label: "‘nother", toLabel: "’nother", copy: "‘nother\\b", paste: "’nother", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_people1: { regex: /peoples/gi, ui: { label: "peoples", toLabel: "add apostrophe?", copy: "peoples", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_people2: { regex: /\bmens\b/gi, ui: { label: "mens", toLabel: "add apostrophe?", copy: "\\bmens\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_people3: { regex: /womens/gi, ui: { label: "womens", toLabel: "add apostrophe?", copy: "womens", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_people4: { regex: /childrens/gi, ui: { label: "childrens", toLabel: "add apostrophe?", copy: "childrens", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_round: { regex: /‘round\b/gi, ui: { label: "‘round", toLabel: "’round", copy: "‘round\\b", paste: "’round", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_sup: { regex: /‘sup\b/gi, ui: { label: "‘sup", toLabel: "’sup", copy: "‘sup\\b", paste: "’sup", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_til: { regex: /‘til\b/gi, ui: { label: "‘til", toLabel: "’til", copy: "‘til\\b", paste: "’til", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_tis: { regex: /‘tis\b/gi, ui: { label: "‘tis", toLabel: "’tis", copy: "‘tis\\b", paste: "’tis", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_twas: { regex: /‘twas\b/gi, ui: { label: "‘twas", toLabel: "’twas", copy: "‘twas\\b", paste: "’twas", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_tween: { regex: /‘tween\b/gi, ui: { label: "‘tween", toLabel: "’tween", copy: "‘tween\\b", paste: "’tween", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_twere: { regex: /‘twere\b/gi, ui: { label: "‘twere", toLabel: "’twere", copy: "‘twere\\b", paste: "’twere", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_pos_twixt: { regex: /‘twixt\b/gi, ui: { label: "‘twixt", toLabel: "’twixt", copy: "‘twixt\\b", paste: "’twixt", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_possessive_double: { regex: /\w+’s and [\w-]+’s/gi, ui: { label: "Double possessive?", toLabel: "", copy: "\\w+’s and [\\w-]+’s", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_possessive_singular: { regex: /s’\s/gi, ui: { label: "s’ (singular possessive?)", toLabel: "s’s", copy: "s’\\s", paste: "s’s", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_punctuation_before_newline: { regex: /[^.?!:”\)\]—\s]\n/g, ui: { label: "No punctuation after ¶", toLabel: "", copy: "[^.?!:”)\\]—\\s]\\n", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_quotes_end: { regex: /“[^”]*?“/g, ui: { label: "Missing end quotes", toLabel: "", copy: "“[^”]*?“", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_quotes_start: { regex: /”[^“]*?”/g, ui: { label: "Missing start quotes", toLabel: "", copy: "”[^“]*?”", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_space: { regex: /[ ]{2}/g, ui: { label: "Two spaces", toLabel: "One space", copy: "  ", paste: " ", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_space2: { regex: /\n /g, ui: { label: "Space after new line", toLabel: "", copy: "\\n ", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_space3: { regex: / \.([^\.]|$)/g, ui: { label: "Space before period", toLabel: "", copy: " \\.([^\\.]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_space4: { regex: / ,([^\.]|$)/g, ui: { label: "Space before comma", toLabel: "", copy: " \\.([^\\.]|$)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_space5: { regex: /\w[.?!]+ +[’”]/g, ui: { label: ".[space]”", toLabel: "", copy: "\\w[.?!]+ +[’”]", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_straight_pos: { regex: /'/g, ui: { label: "Straight '", toLabel: "", copy: "\\'", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_straight_pos2: { regex: /‘s\b/gi, ui: { label: "‘s", toLabel: "’s", copy: "‘s\\b", paste: "’s", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  p_straight_quote: { regex: /"/g, ui: { label: "Straight \"", toLabel: "", copy: "\\\"", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_adverb: { regex: /ly-(?!(?:fledged|nilly))/gi, ui: { label: "hyphenated adverbs (ly-)", toLabel: "", copy: "ly-(?!(?:fledged|nilly))", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_hyphen_numbers: { regex: /(twen|thir|for|fif|six|seven|eigh|nine)ty (one|two|three|four|five|six|seven|eight|nine)/gi, ui: { label: "Hyphenate numbers [21-99]", toLabel: "", copy: "(twen|thir|for|fif|six|seven|eigh|nine)ty (one|two|three|four|five|six|seven|eight|nine)", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_less_plural: { regex: /\bless [a-z]+(?<!ou)s\b/gi, ui: { label: "'Less' used for countable quantity?", toLabel: "", copy: "\\bless [a-z]+(?<!ou)s\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_reason_why: { regex: /\breason why\b/gi, ui: { label: "reason why", toLabel: "", copy: "reason why", paste: "", mw: "", copyLabels: true}, type: IssueType.PG, styleGuides: []}, 
  z_space_before_measurement: { regex: /[0-9](cm|m|km|centimeter|centimeters|meter|meters|kilometer|kilometers|g|kg|gram|grams|kilogram|kilograms)\b/gi, ui: { label: "No space before measurement", toLabel: "Add space before measurement", copy: "[0-9](cm|m|km|centimeter|centimeters|meter|meters|kilometer|kilometers|g|kg|gram|grams|kilogram|kilograms)\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_stutter_t_th: { regex: /t-th/gi, ui: { label: "t-th", toLabel: "th-th (stutter?)", copy: "t-th", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  z_stutter_w_wh: { regex: /w-wh/gi, ui: { label: "w-wh", toLabel: "wh-wh (stutter?)", copy: "w-wh", paste: "", mw: "", copyLabels: false}, type: IssueType.PG, styleGuides: []}, 
  above_ground: { regex: /above ground/gi, ui: { label: "above ground", toLabel: "aboveground?", copy: "above ground", paste: "aboveground", mw: "aboveground", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  absent_mindedly: { regex: /absent-mindedly/gi, ui: { label: "absent-mindedly", toLabel: "absentmindedly", copy: "", paste: "", mw: "absent-minded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  absent_mindedness: { regex: /absent-mindedness/gi, ui: { label: "absent-mindedness", toLabel: "absentmindedness", copy: "", paste: "", mw: "absent-minded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  absentminded: { regex: /absentminded\b/gi, ui: { label: "absentminded", toLabel: "absent-minded", copy: "absentminded\\b", paste: "absent-minded", mw: "absent-minded", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  accidently: { regex: /accidently/gi, ui: { label: "accidently", toLabel: "accidentally", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ack: { regex: /acknowledgement/gi, ui: { label: "acknowledgement", toLabel: "acknowledgment", copy: "", paste: "", mw: "acknowledgment", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  adult_like: { regex: /adult-like/gi, ui: { label: "adult-like", toLabel: "adultlike", copy: "", paste: "", mw: "adultlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  adverting: { regex: /adverting/gi, ui: { label: "adverting", toLabel: "averting", copy: "", paste: "", mw: "avert", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  after_effect: { regex: /after-effect/gi, ui: { label: "after-effect", toLabel: "aftereffect", copy: "", paste: "", mw: "aftereffect", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ahaha: { regex: /ahaha/gi, ui: { label: "ahaha", toLabel: "ah ha ha", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  air_tight: { regex: /air tight/gi, ui: { label: "air tight", toLabel: "airtight", copy: "", paste: "", mw: "airtight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  air_tight2: { regex: /air-tight/gi, ui: { label: "air-tight", toLabel: "airtight", copy: "", paste: "", mw: "airtight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  aircon: { regex: /aircon/gi, ui: { label: "aircon", toLabel: "AC or air conditioning", copy: "aircon", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  all_out: { regex: /\ball out\b/gi, ui: { label: "all out (adverb)", toLabel: "", copy: "\\ball out\\b", paste: "", mw: "all out", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  all_out2: { regex: /\ball-out\b/gi, ui: { label: "all-out (adjective)", toLabel: "", copy: "\\ball-out\\b", paste: "", mw: "all-out", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  alright: { regex: /alright/gi, ui: { label: "alright", toLabel: "all right", copy: "", paste: "", mw: "all right", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ambiance: { regex: /ambiance/gi, ui: { label: "ambiance", toLabel: "ambience", copy: "", paste: "", mw: "ambience", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ambiant: { regex: /ambiant/gi, ui: { label: "ambiant", toLabel: "ambient", copy: "", paste: "", mw: "ambient", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  animal_like: { regex: /animal-like/gi, ui: { label: "animal-like", toLabel: "animallike", copy: "", paste: "", mw: "animallike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  anti_hyphen: { regex: /\banti-/gi, ui: { label: "anti-", toLabel: "remove hyphen?", copy: "anti-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  any_time_soon: { regex: /any time soon/gi, ui: { label: "any time soon", toLabel: "anytime soon", copy: "", paste: "", mw: "anytime soon", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  apologise: { regex: /apologise/gi, ui: { label: "apologise", toLabel: "apologize", copy: "", paste: "", mw: "apologize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  apologising: { regex: /apologising/gi, ui: { label: "apologising", toLabel: "apologizing", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  arm_in_arm: { regex: /arm-in-arm/gi, ui: { label: "arm-in-arm", toLabel: "arm in arm", copy: "", paste: "", mw: "arm in arm", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  auto_pilot: { regex: /auto-pilot/gi, ui: { label: "auto-pilot", toLabel: "autopilot", copy: "", paste: "", mw: "autopilot", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ax: { regex: /\baxe\b/gi, ui: { label: "axe", toLabel: "ax", copy: "\\baxe\\b", paste: "ax", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  axe: { regex: /\bax\b/gi, ui: { label: "ax", toLabel: "axe", copy: "\\bax\\b", paste: "axe", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  back_and_forth: { regex: /back-and-forth/gi, ui: { label: "back-and-forth (noun)", toLabel: "", copy: "back-and-forth", paste: "", mw: "back-and-forth", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  back_and_forth2: { regex: /back and forth/gi, ui: { label: "back and forth (adverb)", toLabel: "", copy: "back and forth", paste: "", mw: "back and forth", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  back_breaking: { regex: /back-breaking/gi, ui: { label: "back-breaking", toLabel: "backbreaking", copy: "", paste: "", mw: "backbreaking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  back_to_back: { regex: /back to back/gi, ui: { label: "back to back", toLabel: "back-to-back", copy: "", paste: "", mw: "back-to-back", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  back_up: { regex: /\bback up\b/gi, ui: { label: "back up (verb)", toLabel: "", copy: "\\bback up\\b", paste: "", mw: "back up", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  back_up2: { regex: /back-up/gi, ui: { label: "back-up", toLabel: "backup", copy: "", paste: "", mw: "back up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  back_yard: { regex: /back yard/gi, ui: { label: "back yard", toLabel: "backyard", copy: "", paste: "", mw: "backyard", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  backup: { regex: /backup/gi, ui: { label: "backup (noun)", toLabel: "", copy: "backup", paste: "", mw: "backup", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  bad_mouth: { regex: /bad mouth/gi, ui: { label: "bad mouth", toLabel: "bad-mouth (verb?)", copy: "bad mouth", paste: "bad-mouth", mw: "bad-mouth", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  badmouth: { regex: /badmouth/gi, ui: { label: "badmouth", toLabel: "bad-mouth", copy: "", paste: "", mw: "bad-mouth", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bare_bones: { regex: /bare bones/gi, ui: { label: "bare bones", toLabel: "bare-bones", copy: "", paste: "", mw: "bare-bones", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  barebones: { regex: /barebones/gi, ui: { label: "barebones", toLabel: "bare-bones", copy: "", paste: "", mw: "bare-bones", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bathhouse: { regex: /bath house/gi, ui: { label: "bath house", toLabel: "bathhouse", copy: "", paste: "", mw: "bathhouse", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bed_time: { regex: /bed time/gi, ui: { label: "bed time", toLabel: "bedtime", copy: "", paste: "", mw: "bedtime", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  best_seller: { regex: /best-seller/gi, ui: { label: "best-seller", toLabel: "bestseller", copy: "", paste: "", mw: "bestseller", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bite_sized: { regex: /bite-sized/gi, ui: { label: "bite-sized", toLabel: "bite-size", copy: "", paste: "", mw: "bite-size", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  black_and_white: { regex: /black and white/gi, ui: { label: "black and white", toLabel: "black-and-white", copy: "", paste: "", mw: "black-and-white", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blindspot: { regex: /blindspot/gi, ui: { label: "blindspot", toLabel: "blind spot", copy: "", paste: "", mw: "blind spot", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blonde2: { regex: /blonde/gi, ui: { label: "blonde", toLabel: "blond", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  blood_curdling: { regex: /blood-curdling/gi, ui: { label: "blood-curdling", toLabel: "bloodcurdling", copy: "", paste: "", mw: "bloodcurdling", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_curdling2: { regex: /blood curdling/gi, ui: { label: "blood curdling", toLabel: "bloodcurdling", copy: "", paste: "", mw: "bloodcurdling", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_red: { regex: /blood-red/gi, ui: { label: "blood-red", toLabel: "bloodred", copy: "", paste: "", mw: "bloodred", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_red2: { regex: /blood red/gi, ui: { label: "blood red", toLabel: "bloodred", copy: "", paste: "", mw: "bloodred", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_stain: { regex: /blood stain/gi, ui: { label: "blood stain", toLabel: "bloodstain", copy: "", paste: "", mw: "bloodstain", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_stain2: { regex: /blood-stain/gi, ui: { label: "blood-stain", toLabel: "bloodstain", copy: "", paste: "", mw: "bloodstain", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_sucker: { regex: /blood-sucker/gi, ui: { label: "blood-sucker", toLabel: "bloodsucker", copy: "", paste: "", mw: "bloodsucker", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  blood_sucking: { regex: /blood-sucking/gi, ui: { label: "blood-sucking", toLabel: "bloodsucking", copy: "", paste: "", mw: "bloodsucking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bow_string: { regex: /bow string/gi, ui: { label: "bow string", toLabel: "bowstring", copy: "", paste: "", mw: "bowstring", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  brain_dead: { regex: /brain dead/gi, ui: { label: "brain dead", toLabel: "brain-dead", copy: "", paste: "", mw: "brain-dead", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  braindead: { regex: /braindead/gi, ui: { label: "braindead", toLabel: "brain-dead", copy: "", paste: "", mw: "brain-dead", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  breakdancing: { regex: /breakdancing/gi, ui: { label: "breakdancing", toLabel: "break dancing", copy: "", paste: "", mw: "break dancing", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bride_to_be: { regex: /bride to be/gi, ui: { label: "bride to be", toLabel: "bride-to-be", copy: "", paste: "", mw: "bride-to-be", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  broadminded: { regex: /broadminded/gi, ui: { label: "broadminded", toLabel: "broad-minded", copy: "", paste: "", mw: "broad-minded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  build_up: { regex: /build-up/gi, ui: { label: "build-up", toLabel: "buildup", copy: "", paste: "", mw: "buildup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bulls_eye: { regex: /bull’s eye/gi, ui: { label: "bull’s eye", toLabel: "bull’s-eye", copy: "", paste: "", mw: "bull's-eye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bullseye: { regex: /bullseye/gi, ui: { label: "bullseye", toLabel: "bull’s-eye", copy: "", paste: "", mw: "bull's-eye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  business_like: { regex: /business-like/gi, ui: { label: "business-like", toLabel: "businesslike", copy: "", paste: "", mw: "businesslike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bye_bye: { regex: /bye bye/gi, ui: { label: "bye bye", toLabel: "bye-bye", copy: "", paste: "", mw: "bye-bye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  bye_bye2: { regex: /bye, bye/gi, ui: { label: "bye, bye", toLabel: "bye-bye", copy: "", paste: "", mw: "bye-bye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cafe: { regex: /\bcafe\b/gi, ui: { label: "cafe", toLabel: "café", copy: "", paste: "", mw: "café", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  canape: { regex: /canape/gi, ui: { label: "canape", toLabel: "canapé", copy: "", paste: "", mw: "canapé", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cancelation: { regex: /cancelation/gi, ui: { label: "cancelation", toLabel: "cancellation", copy: "", paste: "", mw: "cancellation", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cancelled: { regex: /cancelled/gi, ui: { label: "cancelled", toLabel: "canceled", copy: "", paste: "", mw: "cancel", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cancelling: { regex: /cancelling/gi, ui: { label: "cancelling", toLabel: "canceling", copy: "", paste: "", mw: "canceling", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  candle_holder: { regex: /candle holder/gi, ui: { label: "candle holder", toLabel: "candleholder", copy: "", paste: "", mw: "candleholder", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  canons: { regex: /canons/gi, ui: { label: "canons", toLabel: "cannons (weapons?)", copy: "canons", paste: "cannons", mw: "cannon", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  cat_like: { regex: /cat-like/gi, ui: { label: "cat-like", toLabel: "catlike", copy: "", paste: "", mw: "catlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  catch_phrase: { regex: /catch phrase/gi, ui: { label: "catch phrase", toLabel: "catchphrase", copy: "", paste: "", mw: "catchphrase", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  catch_phrase2: { regex: /catch-phrase/gi, ui: { label: "catch-phrase", toLabel: "catchphrase", copy: "", paste: "", mw: "catchphrase", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cell_phone: { regex: /cellphone/gi, ui: { label: "cellphone", toLabel: "cell phone", copy: "", paste: "", mw: "cell phone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  centre: { regex: /centre/gi, ui: { label: "centre", toLabel: "center", copy: "", paste: "", mw: "center", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  chainmail: { regex: /chainmail/gi, ui: { label: "chainmail", toLabel: "chain mail", copy: "", paste: "", mw: "chain mail", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  check_up: { regex: /check-up/gi, ui: { label: "check-up", toLabel: "checkup", copy: "", paste: "", mw: "checkup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  child_like: { regex: /child-like/gi, ui: { label: "child-like", toLabel: "childlike", copy: "", paste: "", mw: "childlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  chit_chat: { regex: /chit-chat/gi, ui: { label: "chit-chat", toLabel: "chitchat", copy: "", paste: "", mw: "chitchat", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  chit_chat2: { regex: /chit chat/gi, ui: { label: "chit chat", toLabel: "chitchat", copy: "", paste: "", mw: "chitchat", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  chock_full: { regex: /chock full/gi, ui: { label: "chock full", toLabel: "chock-full", copy: "", paste: "", mw: "chock-full", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  chokehold: { regex: /chokehold/gi, ui: { label: "chokehold", toLabel: "choke hold", copy: "", paste: "", mw: "choke hold", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  city_state: { regex: /city state/gi, ui: { label: "city state", toLabel: "city-state (noun?)", copy: "city state", paste: "city-state", mw: "city-state", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  clean_up: { regex: /clean-up/gi, ui: { label: "clean-up", toLabel: "cleanup", copy: "", paste: "", mw: "cleanup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  clear_headed: { regex: /clear-headed/gi, ui: { label: "clear-headed", toLabel: "clearheaded", copy: "", paste: "", mw: "clearheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cliche: { regex: /cliche/gi, ui: { label: "cliche", toLabel: "cliché", copy: "", paste: "", mw: "cliché", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cliff_hanger: { regex: /cliff hanger/gi, ui: { label: "cliff hanger", toLabel: "cliff-hanger", copy: "", paste: "", mw: "cliff-hanger", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cliffhanger: { regex: /cliffhanger/gi, ui: { label: "cliffhanger", toLabel: "cliff-hanger", copy: "", paste: "", mw: "cliff-hanger", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  climatic: { regex: /climatic/gi, ui: { label: "climatic", toLabel: "climactic", copy: "", paste: "", mw: "climactic", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  closeup: { regex: /closeup/gi, ui: { label: "closeup", toLabel: "close-up", copy: "", paste: "", mw: "close-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  club_room: { regex: /club room/gi, ui: { label: "club room", toLabel: "clubroom", copy: "", paste: "", mw: "clubroom", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  co_exist: { regex: /co-exist/gi, ui: { label: "co-exist", toLabel: "coexist", copy: "", paste: "", mw: "coexist", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  co_worker: { regex: /co-worker/gi, ui: { label: "co-worker", toLabel: "coworker", copy: "", paste: "", mw: "coworker", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cold_hearted: { regex: /cold-hearted/gi, ui: { label: "cold-hearted", toLabel: "coldhearted", copy: "", paste: "", mw: "coldhearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  collar_bone: { regex: /collar bone/gi, ui: { label: "collar bone", toLabel: "collarbone", copy: "", paste: "", mw: "collarbone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  colour: { regex: /colour/gi, ui: { label: "colour", toLabel: "color", copy: "", paste: "", mw: "color", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  combatting: { regex: /combatting/gi, ui: { label: "combatting", toLabel: "combating", copy: "", paste: "", mw: "combat", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  commander_in_chief: { regex: /commander-in-chief/gi, ui: { label: "commander-in-chief", toLabel: "commander in chief", copy: "", paste: "", mw: "commander in chief", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  comprised_of: { regex: /comprised of/gi, ui: { label: "comprised of", toLabel: "comprising", copy: "", paste: "", mw: "comprise", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  concensus: { regex: /concensus/gi, ui: { label: "concensus", toLabel: "consensus", copy: "", paste: "", mw: "consensus", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cool_headed: { regex: /cool-headed/gi, ui: { label: "cool-headed", toLabel: "coolheaded", copy: "", paste: "", mw: "coolheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  counter_attack: { regex: /counter attack/gi, ui: { label: "counter attack", toLabel: "counterattack", copy: "", paste: "", mw: "counterattack", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  counter_invasion: { regex: /counter invasion/gi, ui: { label: "counter invasion", toLabel: "counterinvasion", copy: "", paste: "", mw: "counterinvasion", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  counter_offensive: { regex: /counter-offensive/gi, ui: { label: "counter-offensive", toLabel: "counteroffensive", copy: "", paste: "", mw: "counteroffensive", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  coup: { regex: /coup d’etat/gi, ui: { label: "coup d’etat", toLabel: "coup d’état", copy: "", paste: "", mw: "coup d’état", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  coup_de_grace: { regex: /coup de grace/gi, ui: { label: "coup de grace", toLabel: "coup de grâce", copy: "", paste: "", mw: "coup de grâce", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  creeped: { regex: /creeped/gi, ui: { label: "creeped", toLabel: "crept (except \"creeped out\")", copy: "creeped", paste: "crept", mw: "creep", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  criss_cross: { regex: /criss-cross/gi, ui: { label: "criss-cross", toLabel: "crisscross", copy: "", paste: "", mw: "crisscross", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cross_fire: { regex: /cross-fire/gi, ui: { label: "cross-fire", toLabel: "cross fire", copy: "", paste: "", mw: "cross fire", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cross_hair: { regex: /cross-hair/gi, ui: { label: "cross-hair", toLabel: "crosshair", copy: "", paste: "", mw: "crosshair", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cross_hair2: { regex: /cross hair/gi, ui: { label: "cross hair", toLabel: "crosshair", copy: "", paste: "", mw: "crosshair", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cross_section: { regex: /cross-section/gi, ui: { label: "cross-section", toLabel: "cross section", copy: "", paste: "", mw: "cross section", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  crossdress: { regex: /crossdress/gi, ui: { label: "crossdress", toLabel: "cross-dress", copy: "", paste: "", mw: "crossdress", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  crossfire: { regex: /crossfire/gi, ui: { label: "crossfire", toLabel: "cross fire", copy: "", paste: "", mw: "cross fire", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  crystal_clear: { regex: /crystal-clear/gi, ui: { label: "crystal-clear", toLabel: "crystal clear", copy: "", paste: "", mw: "crystal clear", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  crystalized: { regex: /crystalized/gi, ui: { label: "crystalized", toLabel: "crystallized", copy: "", paste: "", mw: "crystallize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cup_noodles: { regex: /cup noodles/gi, ui: { label: "cup noodles", toLabel: "instant ramen", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  curtsey: { regex: /curtsey/gi, ui: { label: "curtsey", toLabel: "curtsy", copy: "", paste: "", mw: "curtsy", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cut_and_dried: { regex: /cut and dried/gi, ui: { label: "cut and dried", toLabel: "cut-and-dried", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cut_and_dry: { regex: /cut and dry/gi, ui: { label: "cut and dry", toLabel: "cut-and-dried", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  cut_and_dry2: { regex: /cut-and-dry/gi, ui: { label: "cut-and-dry", toLabel: "cut-and-dried", copy: "", paste: "", mw: "cut-and-dried", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dagger_like: { regex: /dagger-like/gi, ui: { label: "dagger-like", toLabel: "daggerlike", copy: "", paste: "", mw: "daggerlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  damndest: { regex: /damndest/gi, ui: { label: "damndest", toLabel: "damnedest", copy: "", paste: "", mw: "damnedest", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  day_long: { regex: /day-long/gi, ui: { label: "day-long", toLabel: "daylong", copy: "", paste: "", mw: "daylong", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  day_to_day_life: { regex: /day to day life/gi, ui: { label: "day to day life", toLabel: "day-to-day life", copy: "", paste: "", mw: "day-to-day", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  daycare: { regex: /daycare/gi, ui: { label: "daycare", toLabel: "day care", copy: "", paste: "", mw: "day care", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  daycare2: { regex: /day-care/gi, ui: { label: "day-care", toLabel: "day care", copy: "", paste: "", mw: "day care", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dead_on: { regex: /\bdead on\b/gi, ui: { label: "dead on", toLabel: "dead-on (adjective?)", copy: "\\bdead on\\b", paste: "dead-on", mw: "dead-on", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  dead_set: { regex: /dead-set/gi, ui: { label: "dead-set", toLabel: "dead set", copy: "", paste: "", mw: "dead set", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  deadset: { regex: /deadset/gi, ui: { label: "deadset", toLabel: "dead set", copy: "", paste: "", mw: "dead set", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  deal_breaker: { regex: /deal breaker/gi, ui: { label: "deal breaker", toLabel: "deal-breaker", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  deal_maker: { regex: /deal-maker/gi, ui: { label: "deal-maker", toLabel: "dealmaker", copy: "", paste: "", mw: "dealmaker", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  deal_making: { regex: /deal-making/gi, ui: { label: "deal-making", toLabel: "dealmaking", copy: "", paste: "", mw: "dealmaking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dealbreaker: { regex: /dealbreaker/gi, ui: { label: "dealbreaker", toLabel: "deal-breaker", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  decision_making: { regex: /decision making/gi, ui: { label: "decision making", toLabel: "decision-making ", copy: "", paste: "", mw: "decision-making", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  deep_fry: { regex: /deep fry/gi, ui: { label: "deep fry", toLabel: "deep-fry", copy: "", paste: "", mw: "deep-fry", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  defence: { regex: /defence/gi, ui: { label: "defence", toLabel: "defense", copy: "", paste: "", mw: "defense", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dejavu: { regex: /deja vu/gi, ui: { label: "deja vu", toLabel: "déjà vu", copy: "", paste: "", mw: "déjà vu", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  descendent: { regex: /descendent/gi, ui: { label: "descendent", toLabel: "descendant", copy: "", paste: "", mw: "descendant", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dieing: { regex: /dieing/gi, ui: { label: "dieing", toLabel: "dying", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dilly_dally: { regex: /dilly dally/gi, ui: { label: "dilly dally", toLabel: "dillydally", copy: "", paste: "", mw: "dillydally", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dinner_time: { regex: /dinner time/gi, ui: { label: "dinner time", toLabel: "dinnertime", copy: "", paste: "", mw: "dinnertime", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  discernable: { regex: /discernable/gi, ui: { label: "discernable", toLabel: "discernible", copy: "", paste: "", mw: "discernible", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  discernably: { regex: /discernably/gi, ui: { label: "discernably", toLabel: "discernibly", copy: "", paste: "", mw: "discernibly", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  discreet: { regex: /discreet/gi, ui: { label: "discreet (discrete?)", toLabel: "", copy: "discreet", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  discrete: { regex: /discrete/gi, ui: { label: "discrete (discreet?)", toLabel: "", copy: "discrete", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  doppelganger: { regex: /doppelganger/gi, ui: { label: "doppelganger", toLabel: "doppelgänger", copy: "", paste: "", mw: "doppelgänger", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  doppleganger: { regex: /doppleganger/gi, ui: { label: "doppleganger", toLabel: "doppelgänger", copy: "", paste: "", mw: "doppelgänger", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  double_take: { regex: /double-take/gi, ui: { label: "double-take", toLabel: "double take", copy: "", paste: "", mw: "double take", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  doubletake: { regex: /doubletake/gi, ui: { label: "doubletake", toLabel: "double take", copy: "", paste: "", mw: "double take", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  draw_string: { regex: /draw string/gi, ui: { label: "draw string", toLabel: "drawstring (noun?)", copy: "draw string", paste: "drawstring", mw: "drawstring", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  dream_world: { regex: /dream world/gi, ui: { label: "dream world", toLabel: "dreamworld (noun?)", copy: "dream world", paste: "dreamworld", mw: "dreamworld", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  dream_world2: { regex: /dream-world/gi, ui: { label: "dream-world", toLabel: "dreamworld (noun?)", copy: "dream-world", paste: "dreamworld", mw: "dreamworld", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  drier: { regex: /drier/gi, ui: { label: "drier (adjective)", toLabel: "", copy: "drier", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  drop_out: { regex: /drop-out/gi, ui: { label: "drop-out", toLabel: "dropout", copy: "", paste: "", mw: "dropout", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  dryer: { regex: /dryer/gi, ui: { label: "dryer (appliance)", toLabel: "", copy: "dryer", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  dust_up: { regex: /dust-up/gi, ui: { label: "dust-up", toLabel: "dustup", copy: "", paste: "", mw: "dustup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  duty_bound: { regex: /duty-bound/gi, ui: { label: "duty-bound", toLabel: "duty bound", copy: "", paste: "", mw: "duty bound", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ear_splitting: { regex: /ear-splitting/gi, ui: { label: "ear-splitting", toLabel: "earsplitting", copy: "", paste: "", mw: "earsplitting", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  earth_shaking: { regex: /earth-shaking/gi, ui: { label: "earth-shaking", toLabel: "earthshaking", copy: "", paste: "", mw: "earthshaking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  elicit: { regex: /elicit/gi, ui: { label: "elicit (verb)", toLabel: "", copy: "elicit", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  email: { regex: /email/gi, ui: { label: "email", toLabel: "e-mail", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  emphasise: { regex: /emphasise/gi, ui: { label: "emphasise", toLabel: "emphasize", copy: "", paste: "", mw: "emphasize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  emphasising: { regex: /emphasising/gi, ui: { label: "emphasising", toLabel: "emphasizing", copy: "", paste: "", mw: "emphasize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  empty_handed: { regex: /empty handed/gi, ui: { label: "empty handed", toLabel: "empty-handed", copy: "", paste: "", mw: "empty-handed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  emptyhanded: { regex: /emptyhanded/gi, ui: { label: "emptyhanded", toLabel: "empty-handed", copy: "", paste: "", mw: "empty-handed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  enquire: { regex: /enquire/gi, ui: { label: "enquire", toLabel: "inquire", copy: "", paste: "", mw: "inquire", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  enroute: { regex: /enroute/gi, ui: { label: "enroute", toLabel: "en route", copy: "", paste: "", mw: "en route", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  entree: { regex: /entree/gi, ui: { label: "entree", toLabel: "entrée", copy: "", paste: "", mw: "entrée", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ever_so: { regex: /ever-so/gi, ui: { label: "ever-so", toLabel: "ever so", copy: "", paste: "", mw: "ever so", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  extra_hyphen: { regex: /\bextra-/gi, ui: { label: "extra-", toLabel: "remove hyphen?", copy: "extra-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  eye_patch: { regex: /eye-patch/gi, ui: { label: "eye-patch", toLabel: "eye patch", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  eye_to_eye: { regex: /eye-to-eye/gi, ui: { label: "eye-to-eye", toLabel: "eye to eye", copy: "", paste: "", mw: "see eye to eye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  eye_witness: { regex: /eye witness/gi, ui: { label: "eye witness", toLabel: "eyewitness", copy: "", paste: "", mw: "eyewitness", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  eye_witness2: { regex: /eye-witness/gi, ui: { label: "eye-witness", toLabel: "eyewitness", copy: "", paste: "", mw: "eyewitness", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  eyepatch: { regex: /eyepatch/gi, ui: { label: "eyepatch", toLabel: "eye patch", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  face_to_face: { regex: /face to face/gi, ui: { label: "face to face", toLabel: "face-to-face", copy: "", paste: "", mw: "face-to-face", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  faint_hearted: { regex: /faint-hearted/gi, ui: { label: "faint-hearted", toLabel: "fainthearted", copy: "", paste: "", mw: "fainthearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  far_flung: { regex: /far flung/gi, ui: { label: "far flung", toLabel: "far-flung", copy: "", paste: "", mw: "far-flung", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  farm_work: { regex: /farm work/gi, ui: { label: "farm work", toLabel: "farmwork", copy: "", paste: "", mw: "farmwork", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  farsight: { regex: /farsight/gi, ui: { label: "farsight", toLabel: "far-sight", copy: "", paste: "", mw: "far-sight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  fast_food: { regex: /fast-food/gi, ui: { label: "fast-food", toLabel: "fast food (noun?)", copy: "fast-food", paste: "fast food", mw: "fast food", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fast_food2: { regex: /fast food/gi, ui: { label: "fast food", toLabel: "fast-food (adjective?)", copy: "fast food", paste: "fast-food", mw: "fast-food", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fed_up: { regex: /fed-up/gi, ui: { label: "fed-up", toLabel: "fed up", copy: "", paste: "", mw: "fed up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  fiance: { regex: /\bfiance[^e]/gi, ui: { label: "fiance", toLabel: "fiancé", copy: "\\bfiance[^e]", paste: "fiancé", mw: "fiancé", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fiancee: { regex: /fiancee/gi, ui: { label: "fiancee", toLabel: "fiancée", copy: "", paste: "", mw: "fiancée", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  filet: { regex: /filet/gi, ui: { label: "filet (lace?)", toLabel: "fillet (meat?)", copy: "filet", paste: "fillet", mw: "fillet", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fine_tune: { regex: /fine tune/gi, ui: { label: "fine tune", toLabel: "fine-tune (verb?)", copy: "fine tune", paste: "fine-tune", mw: "fine-tune", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fine_tuning: { regex: /fine tuning/gi, ui: { label: "fine tuning", toLabel: "fine-tuning (verb?)", copy: "fine tuning", paste: "fine-tuning", mw: "fine-tune", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  finger_like: { regex: /finger-like/gi, ui: { label: "finger-like", toLabel: "fingerlike", copy: "", paste: "", mw: "fingerlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  first_aid: { regex: /first-aid/gi, ui: { label: "first-aid", toLabel: "first aid", copy: "", paste: "", mw: "first aid", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  first_ever: { regex: /first ever/gi, ui: { label: "first ever (adj.)", toLabel: "first-ever", copy: "first ever", paste: "first-ever", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  first_hand: { regex: /first-hand/gi, ui: { label: "first-hand", toLabel: "firsthand", copy: "", paste: "", mw: "firsthand", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  first_hand2: { regex: /first hand/gi, ui: { label: "first hand", toLabel: "firsthand (adjective?)", copy: "first hand", paste: "firsthand", mw: "firsthand", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  first_in_command: { regex: /first in command/gi, ui: { label: "first in command", toLabel: "first-in-command", copy: "", paste: "", mw: "first-in-command", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  first_years: { regex: /first years/gi, ui: { label: "first years", toLabel: "first-years (noun?)", copy: "first years", paste: "first-years", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  fist_fight: { regex: /fist-fight/gi, ui: { label: "fist-fight", toLabel: "fistfight", copy: "", paste: "", mw: "fistfight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  fist_fight2: { regex: /fist fight/gi, ui: { label: "fist fight", toLabel: "fistfight", copy: "", paste: "", mw: "fistfight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  fist_full: { regex: /fist full/gi, ui: { label: "fist full", toLabel: "fistful?", copy: "fist full", paste: "fistful", mw: "fistful", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  flack: { regex: /flack/gi, ui: { label: "flack", toLabel: "flak", copy: "", paste: "", mw: "flak", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  flier: { regex: /flier/gi, ui: { label: "flier", toLabel: "flyer (pamphlet?)", copy: "flier", paste: "flyer", mw: "flyer", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  flipside: { regex: /flipside/gi, ui: { label: "flipside", toLabel: "flip side", copy: "", paste: "", mw: "flip side", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  floorplan: { regex: /floorplan/gi, ui: { label: "floorplan", toLabel: "floor plan", copy: "", paste: "", mw: "floor plan", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  followup: { regex: /followup/gi, ui: { label: "followup", toLabel: "follow-up", copy: "", paste: "", mw: "follow-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  footsoldier: { regex: /footsoldier/gi, ui: { label: "footsoldier", toLabel: "foot soldier", copy: "", paste: "", mw: "foot soldier", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  forcefield: { regex: /forcefield/gi, ui: { label: "forcefield", toLabel: "force field", copy: "", paste: "", mw: "force field", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  forego: { regex: /forego/gi, ui: { label: "forego (to precede?)", toLabel: "", copy: "forego", paste: "", mw: "forego", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  forewent: { regex: /forewent/gi, ui: { label: "forewent (to precede?)", toLabel: "", copy: "forewent", paste: "", mw: "forego", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  forgo: { regex: /forgo\b/gi, ui: { label: "forgo (to go without?)", toLabel: "", copy: "forgo", paste: "", mw: "forgo", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  forgone: { regex: /forgone/gi, ui: { label: "forgone (to go without?)", toLabel: "", copy: "forgone", paste: "", mw: "forgo", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  form_fitting: { regex: /form-fitting/gi, ui: { label: "form-fitting", toLabel: "formfitting", copy: "", paste: "", mw: "formfitting", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  forsaw: { regex: /forsaw/gi, ui: { label: "forsaw", toLabel: "foresaw", copy: "", paste: "", mw: "foresee", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  forsee: { regex: /forsee/gi, ui: { label: "forsee", toLabel: "foresee", copy: "", paste: "", mw: "foresee", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  forwent: { regex: /forwent/gi, ui: { label: "forwent (to go without?)", toLabel: "", copy: "forwent", paste: "", mw: "forgo", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  foul_mouthed: { regex: /foul-mouthed/gi, ui: { label: "foul-mouthed", toLabel: "foulmouthed", copy: "", paste: "", mw: "foulmouthed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  free_fall: { regex: /free-fall/gi, ui: { label: "free-fall (verb)", toLabel: "", copy: "free-fall", paste: "", mw: "free-fall", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  free_fall2: { regex: /free fall/gi, ui: { label: "free fall (noun)", toLabel: "", copy: "free fall", paste: "", mw: "free fall", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  free_flowing: { regex: /free flowing/gi, ui: { label: "free flowing", toLabel: "free-flowing", copy: "", paste: "", mw: "free-flowing", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  free_reign: { regex: /free reign/gi, ui: { label: "free reign", toLabel: "free rein", copy: "", paste: "", mw: "free rein", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  free_spirited: { regex: /free spirited/gi, ui: { label: "free spirited", toLabel: "free-spirited", copy: "", paste: "", mw: "free-spirited", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  frontline1: { regex: /frontline/gi, ui: { label: "frontline (adjective)", toLabel: "", copy: "frontline", paste: "", mw: "frontline", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  frontline2: { regex: /front line/gi, ui: { label: "front line (noun)", toLabel: "", copy: "front line", paste: "", mw: "front line", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  frontlines: { regex: /frontlines/gi, ui: { label: "frontlines", toLabel: "front lines", copy: "", paste: "", mw: "front line", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  g_force: { regex: /\bg force/g, ui: { label: "g force", toLabel: "g-force", copy: "", paste: "", mw: "g-force", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  game_changer: { regex: /game-changer/gi, ui: { label: "game-changer", toLabel: "game changer", copy: "", paste: "", mw: "game changer", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  gamechanger: { regex: /gamechanger/gi, ui: { label: "gamechanger", toLabel: "game changer", copy: "", paste: "", mw: "game changer", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  gameplan: { regex: /gameplan/gi, ui: { label: "gameplan", toLabel: "game plan", copy: "", paste: "", mw: "game plan", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  gatling: { regex: /gatling gun/g, ui: { label: "gatling gun", toLabel: "Gatling gun", copy: "", paste: "", mw: "Gatling gun", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  geez: { regex: /\bgeez\b/gi, ui: { label: "geez", toLabel: "jeez", copy: "geez\\b", paste: "jeez", mw: "jeez", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  get_up: { regex: /get-up/gi, ui: { label: "get-up", toLabel: "getup", copy: "", paste: "", mw: "getup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  glovebox: { regex: /glovebox/gi, ui: { label: "glovebox", toLabel: "glove box", copy: "", paste: "", mw: "glove box", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  god_like: { regex: /god-like/gi, ui: { label: "god-like", toLabel: "godlike", copy: "", paste: "", mw: "godlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  good_will: { regex: /good-will/gi, ui: { label: "good-will", toLabel: "goodwill", copy: "", paste: "", mw: "goodwill", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  goodbye: { regex: /goodbye/gi, ui: { label: "goodbye", toLabel: "good-bye", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  goodwill: { regex: /good will/gi, ui: { label: "good will", toLabel: "goodwill", copy: "", paste: "", mw: "goodwill", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  goosebump: { regex: /goosebump/gi, ui: { label: "goosebump(s)", toLabel: "goose bump(s)", copy: "goosebump", paste: "goose bump", mw: "goose bump", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  great_grand: { regex: /great grand/gi, ui: { label: "great grand (relationship?)", toLabel: "great-grand", copy: "great grand", paste: "great-grand", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  grevious: { regex: /grevious/gi, ui: { label: "grevious", toLabel: "grievous", copy: "", paste: "", mw: "grievous", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  grey: { regex: /grey/gi, ui: { label: "grey", toLabel: "gray", copy: "", paste: "", mw: "gray", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  grinded: { regex: /grinded/gi, ui: { label: "grinded", toLabel: "ground", copy: "", paste: "", mw: "grind", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  grit: { regex: /\bgrit\b/gi, ui: { label: "grit (should be gritted, past tense?)", toLabel: "", copy: "grit\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  grownup: { regex: /grownup/gi, ui: { label: "grownup", toLabel: "grown-up", copy: "", paste: "", mw: "grown-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  guerilla: { regex: /guerilla/gi, ui: { label: "guerilla", toLabel: "guerrilla", copy: "", paste: "", mw: "guerrilla", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  guerrila: { regex: /guerrila/gi, ui: { label: "guerrila", toLabel: "guerrilla", copy: "", paste: "", mw: "guerrilla", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  gun_powder: { regex: /gun powder/gi, ui: { label: "gun powder", toLabel: "gunpowder", copy: "", paste: "", mw: "gunpowder", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  haha: { regex: /haha/gi, ui: { label: "haha", toLabel: "ha-ha", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  half_moon: { regex: /half moon/gi, ui: { label: "half moon", toLabel: "half-moon", copy: "", paste: "", mw: "half-moon", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  half_truth: { regex: /half truth/gi, ui: { label: "half truth", toLabel: "half-truth", copy: "", paste: "", mw: "half-truth", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  halfmoon: { regex: /halfmoon/gi, ui: { label: "halfmoon", toLabel: "half-moon", copy: "", paste: "", mw: "half-moon", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  halftruth: { regex: /halftruth/gi, ui: { label: "halftruth", toLabel: "half-truth", copy: "", paste: "", mw: "half-truth", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  halfwit: { regex: /halfwit/gi, ui: { label: "halfwit", toLabel: "half-wit", copy: "", paste: "", mw: "half-wit", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hand_in_hand: { regex: /hand-in-hand/gi, ui: { label: "hand-in-hand", toLabel: "hand in hand", copy: "", paste: "", mw: "hand in hand", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hand_like: { regex: /hand-like/gi, ui: { label: "hand-like", toLabel: "handlike", copy: "", paste: "", mw: "handlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hand_pick: { regex: /hand-pick/gi, ui: { label: "hand-pick", toLabel: "handpick", copy: "", paste: "", mw: "handpick", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hard_and_fast: { regex: /hard and fast/gi, ui: { label: "hard and fast", toLabel: "hard-and-fast (adjective?)", copy: "hard and fast", paste: "hard-and-fast", mw: "hard-and-fast", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  hard_pressed: { regex: /hard pressed/gi, ui: { label: "hard pressed", toLabel: "hard-pressed", copy: "", paste: "", mw: "hard-pressed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hard_working: { regex: /hard-working/gi, ui: { label: "hard-working", toLabel: "hardworking", copy: "", paste: "", mw: "hardworking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hardpressed: { regex: /hardpressed/gi, ui: { label: "hardpressed", toLabel: "hard-pressed", copy: "", paste: "", mw: "hard-pressed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  head_on: { regex: /\bhead on\b/gi, ui: { label: "head on", toLabel: "head-on (adverb?)", copy: "\\bhead on\\b", paste: "head-on", mw: "head-on", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  head_scratcher: { regex: /head scratcher/gi, ui: { label: "head scratcher", toLabel: "head-scratcher", copy: "", paste: "", mw: "head-scratcher", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  heart_to_heart: { regex: /heart to heart/gi, ui: { label: "heart to heart", toLabel: "heart-to-heart", copy: "", paste: "", mw: "heart-to-heart", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  her_majesty1: { regex: /her majesty/g, ui: { label: "her majesty", toLabel: "Her Majesty (title?)", copy: "her majesty", paste: "Her Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  her_majesty2: { regex: /her Majesty/g, ui: { label: "her Majesty", toLabel: "Her Majesty", copy: "", paste: "", mw: "majesty", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  her_majesty3: { regex: /Her majesty/g, ui: { label: "Her majesty", toLabel: "Her Majesty (title?)", copy: "Her majesty", paste: "Her Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  heroin: { regex: /heroin[^e]/gi, ui: { label: "heroin (heroine?)", toLabel: "", copy: "heroin\\e", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  hide_and_seek: { regex: /hide and seek/gi, ui: { label: "hide and seek", toLabel: "hide-and-seek", copy: "", paste: "", mw: "hide-and-seek", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  high_five: { regex: /high five/gi, ui: { label: "high five (noun)", toLabel: "", copy: "high five", paste: "", mw: "high five", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  high_five2: { regex: /high-five/gi, ui: { label: "high-five (verb)", toLabel: "", copy: "high-five", paste: "", mw: "high-five", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  high_performance: { regex: /high-performance/gi, ui: { label: "high-performance", toLabel: "high performance", copy: "", paste: "", mw: "high performance", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  high_rise: { regex: /high rise/ig, ui: { label: "high rise", toLabel: "high-rise", copy: "", paste: "", mw: "high-rise", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  high_schooler: { regex: /high-schooler/gi, ui: { label: "high-schooler", toLabel: "high schooler", copy: "", paste: "", mw: "high schooler", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  higher_ups: { regex: /higher ups/gi, ui: { label: "higher ups", toLabel: "higher-ups", copy: "", paste: "", mw: "higher-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  his_majesty1: { regex: /his majesty/g, ui: { label: "his majesty", toLabel: "His Majesty (title?)", copy: "his majesty", paste: "His Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  his_majesty2: { regex: /his Majesty/g, ui: { label: "his Majesty", toLabel: "His Majesty", copy: "", paste: "", mw: "majesty", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  his_majesty3: { regex: /His majesty/g, ui: { label: "His majesty", toLabel: "His Majesty (title?)", copy: "His majesty", paste: "His Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  hitman: { regex: /hitman/gi, ui: { label: "hitman", toLabel: "hit man", copy: "", paste: "", mw: "hit man", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hm: { regex: /\bhm\b/gi, ui: { label: "hm", toLabel: "hmm (at least two m's)", copy: "hm", paste: "hmm", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  hold_onto: { regex: /hold onto/gi, ui: { label: "hold onto", toLabel: "hold on to", copy: "", paste: "", mw: "hold on to", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hold_onto2: { regex: /holding onto/gi, ui: { label: "holding onto", toLabel: "holding on to", copy: "", paste: "", mw: "hold on to", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hold_onto3: { regex: /held onto/gi, ui: { label: "held onto", toLabel: "held on to", copy: "", paste: "", mw: "hold on to", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  home_made: { regex: /home-made/gi, ui: { label: "home-made", toLabel: "homemade", copy: "", paste: "", mw: "homemade", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  home_sick: { regex: /home sick/gi, ui: { label: "home sick", toLabel: "homesick (adjective?)", copy: "home sick", paste: "homesick", mw: "homesick", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  home_sick2: { regex: /home-sick/gi, ui: { label: "home-sick", toLabel: "homesick", copy: "", paste: "", mw: "homesick", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  human_like: { regex: /human-like/gi, ui: { label: "human-like", toLabel: "humanlike", copy: "", paste: "", mw: "humanlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hurrah: { regex: /hurrah/gi, ui: { label: "hurrah (exclamation)", toLabel: "hooray", copy: "hurrah", paste: "", mw: "hooray", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  hurray: { regex: /hurray/gi, ui: { label: "hurray", toLabel: "hooray", copy: "", paste: "", mw: "hooray", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  husband_to_be: { regex: /husband to be/ig, ui: { label: "husband to be", toLabel: "husband-to-be", copy: "", paste: "", mw: "husband-to-be", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  hyper_hyphen: { regex: /\bhyper-/gi, ui: { label: "hyper-", toLabel: "remove hyphen?", copy: "hyper-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  ice_box: { regex: /ice box/gi, ui: { label: "ice box", toLabel: "icebox", copy: "", paste: "", mw: "icebox", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ice_cream_cone: { regex: /ice cream cone/gi, ui: { label: "ice cream cone", toLabel: "ice-cream cone", copy: "", paste: "", mw: "ice-cream cone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  icepack: { regex: /icepack/gi, ui: { label: "icepack", toLabel: "ice pack", copy: "", paste: "", mw: "ice pack", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  illicit: { regex: /illicit/gi, ui: { label: "illicit (adjective)", toLabel: "", copy: "illicit", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  inbox: { regex: /\binbox\b/gi, ui: { label: "inbox", toLabel: "in-box", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  iron_clad: { regex: /iron-clad/gi, ui: { label: "iron-clad", toLabel: "ironclad", copy: "", paste: "", mw: "ironclad", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  iron_fisted: { regex: /iron-fisted/gi, ui: { label: "iron-fisted", toLabel: "ironfisted", copy: "", paste: "", mw: "ironfisted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  jeez: { regex: /\bjeez\b/gi, ui: { label: "jeez", toLabel: "geez", copy: "\\bjeez\\b", paste: "geez", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  judge: { regex: /judgement/gi, ui: { label: "judgement", toLabel: "judgment", copy: "", paste: "", mw: "judgment", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  jungle_like: { regex: /jungle-like/gi, ui: { label: "jungle-like", toLabel: "junglelike", copy: "", paste: "", mw: "junglelike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  keychain: { regex: /keychain/gi, ui: { label: "keychain", toLabel: "key chain", copy: "", paste: "", mw: "key chain", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  kickstart: { regex: /kickstart/gi, ui: { label: "kickstart", toLabel: "kick-start", copy: "", paste: "", mw: "kick-start", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  kind_hearted: { regex: /kind-hearted/gi, ui: { label: "kind-hearted", toLabel: "kindhearted", copy: "", paste: "", mw: "kindhearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  kind_hearted2: { regex: /kind hearted/gi, ui: { label: "kind hearted", toLabel: "kindhearted", copy: "", paste: "", mw: "kindhearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  knick_knack: { regex: /knick-knack/gi, ui: { label: "knick-knack", toLabel: "knickknack", copy: "", paste: "", mw: "knickknack", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  knock_off: { regex: /knock-off/gi, ui: { label: "knock-off", toLabel: "knockoff", copy: "", paste: "", mw: "knockoff", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  knowhow: { regex: /knowhow/gi, ui: { label: "knowhow", toLabel: "know-how", copy: "", paste: "", mw: "know-how", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  kohai: { regex: /kohai/gi, ui: { label: "kohai", toLabel: "kouhai", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  laidback: { regex: /laidback/gi, ui: { label: "laidback", toLabel: "laid-back", copy: "", paste: "", mw: "laid-back", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  landmine: { regex: /landmine/gi, ui: { label: "landmine", toLabel: "land mine", copy: "", paste: "", mw: "land mine", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  last_ditch: { regex: /last ditch/gi, ui: { label: "last ditch (noun)", toLabel: "", copy: "last ditch", paste: "", mw: "last ditch", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  last_ditch2: { regex: /last-ditch/gi, ui: { label: "last-ditch (adjective)", toLabel: "", copy: "last-ditch", paste: "", mw: "last-ditch", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  laugh1: { regex: /haha/gi, ui: { label: "haha", toLabel: "ha ha", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  laugh2: { regex: /heehee/gi, ui: { label: "heehee", toLabel: "hee hee", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_man: { regex: /\blay man\b/gi, ui: { label: "lay man", toLabel: "layman", copy: "", paste: "", mw: "layman", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_men: { regex: /\blay men\b/gi, ui: { label: "lay men", toLabel: "laymen", copy: "", paste: "", mw: "layman", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_people: { regex: /\blay people\b/gi, ui: { label: "lay people", toLabel: "laypeople", copy: "", paste: "", mw: "layperson", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_person: { regex: /\blay person\b/gi, ui: { label: "lay person", toLabel: "layperson", copy: "", paste: "", mw: "layperson", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_woman: { regex: /\blay woman\b/gi, ui: { label: "lay woman", toLabel: "laywoman", copy: "", paste: "", mw: "laywoman", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lay_women: { regex: /\blay women\b/gi, ui: { label: "lay women", toLabel: "laywomen", copy: "", paste: "", mw: "laywoman", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lead: { regex: /\blead\b/gi, ui: { label: "lead (should be led, past tense?)", toLabel: "", copy: "\\blead\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  lead_up: { regex: /the lead up/gi, ui: { label: "the lead up", toLabel: "the lead-up", copy: "", paste: "", mw: "lead-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  let_down: { regex: /let-down/gi, ui: { label: "let-down", toLabel: "letdown", copy: "", paste: "", mw: "letdown", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  level_headed: { regex: /level-headed/gi, ui: { label: "level-headed", toLabel: "levelheaded", copy: "", paste: "", mw: "levelheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lie1: { regex: /\blied\b/gi, ui: { label: "lied", toLabel: "lay?", copy: "\\blied\\b", paste: "lay", mw: "lie", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  lie2: { regex: /\blaying\b/gi, ui: { label: "laying", toLabel: "lying?", copy: "\\blaying\\b", paste: "lying", mw: "lie", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  lie3: { regex: /\blaid\b/gi, ui: { label: "laid", toLabel: "lain?", copy: "\\blaid\\b", paste: "lain", mw: "lie", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  life_and_death: { regex: /life and death/gi, ui: { label: "life and death", toLabel: "life-and-death (adjective?)", copy: "life and death", paste: "life-and-death", mw: "life-and-death", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  life_blood: { regex: /life-blood/gi, ui: { label: "life-blood", toLabel: "lifeblood", copy: "", paste: "", mw: "lifeblood", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  life_form: { regex: /life form/gi, ui: { label: "life form", toLabel: "life-form", copy: "", paste: "", mw: "life-form", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  life_span: { regex: /life-span/gi, ui: { label: "life-span", toLabel: "lifespan", copy: "", paste: "", mw: "lifespan", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  life_span2: { regex: /life span/gi, ui: { label: "life span", toLabel: "lifespan", copy: "", paste: "", mw: "lifespan", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  life_threatening: { regex: /life threatening/gi, ui: { label: "life threatening", toLabel: "life-threatening", copy: "", paste: "", mw: "life-threatening", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lifeform: { regex: /lifeform/gi, ui: { label: "lifeform", toLabel: "life-form", copy: "", paste: "", mw: "life-form", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  light_headed: { regex: /light headed/gi, ui: { label: "light headed", toLabel: "lightheaded", copy: "", paste: "", mw: "lightheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  light_headed2: { regex: /light-headed/gi, ui: { label: "light-headed", toLabel: "lightheaded", copy: "", paste: "", mw: "lightheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  light_hearted: { regex: /light-hearted/gi, ui: { label: "light-hearted", toLabel: "lighthearted", copy: "", paste: "", mw: "lighthearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  light_hearted2: { regex: /light hearted/gi, ui: { label: "light hearted", toLabel: "lighthearted", copy: "", paste: "", mw: "lighthearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  light_weight: { regex: /light-weight/gi, ui: { label: "light-weight", toLabel: "lightweight", copy: "", paste: "", mw: "lightweight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lightbulb: { regex: /lightbulb/gi, ui: { label: "lightbulb", toLabel: "light bulb", copy: "", paste: "", mw: "light bulb", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  like_hyphen: { regex: /-like\b/gi, ui: { label: "-like", toLabel: "remove hyphen?", copy: "-like", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  lily_white: { regex: /lily white/gi, ui: { label: "lily white", toLabel: "lily-white", copy: "", paste: "", mw: "lily-white", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  line_up: { regex: /line-up/gi, ui: { label: "line-up", toLabel: "lineup", copy: "", paste: "", mw: "lineup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  liquif: { regex: /liquif(y|ied)/gi, ui: { label: "liquif(y, ied)", toLabel: "liquef(y, ied)", copy: "liquif(y|ied)", paste: "", mw: "liquefy", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  live_stream: { regex: /live-stream/gi, ui: { label: "live-stream", toLabel: "live stream", copy: "", paste: "", mw: "live stream", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  livestream: { regex: /livestream/gi, ui: { label: "livestream", toLabel: "live stream", copy: "", paste: "", mw: "live stream", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  long_shot: { regex: /long-shot/gi, ui: { label: "long-shot", toLabel: "long shot", copy: "", paste: "", mw: "long shot", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  long_time: { regex: /long-time/gi, ui: { label: "long-time", toLabel: "longtime", copy: "", paste: "", mw: "longtime", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  long_time_no_see: { regex: /long time, no see/gi, ui: { label: "long time, no see", toLabel: "long time no see", copy: "", paste: "", mw: "long time no see", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  longshot: { regex: /longshot/gi, ui: { label: "longshot", toLabel: "long shot", copy: "", paste: "", mw: "long shot", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lookalike: { regex: /lookalike/gi, ui: { label: "lookalike", toLabel: "look-alike", copy: "", paste: "", mw: "look-alike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  love_struck: { regex: /love-struck/gi, ui: { label: "love-struck", toLabel: "lovestruck", copy: "", paste: "", mw: "lovestruck", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  loveable: { regex: /loveable/gi, ui: { label: "loveable", toLabel: "lovable", copy: "", paste: "", mw: "lovable", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lunch_time: { regex: /lunch time/gi, ui: { label: "lunch time", toLabel: "lunchtime", copy: "", paste: "", mw: "lunchtime", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  lunchbox: { regex: /lunchbox/gi, ui: { label: "lunchbox", toLabel: "lunch box", copy: "", paste: "", mw: "lunch box", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  make_due: { regex: /make due/gi, ui: { label: "make due", toLabel: "make do", copy: "", paste: "", mw: "make do", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  make_up: { regex: /make-up/gi, ui: { label: "make-up", toLabel: "makeup", copy: "", paste: "", mw: "makeup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  man_power: { regex: /man power/gi, ui: { label: "man power (power from physical effort)", toLabel: "", copy: "man power", paste: "", mw: "man power", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  mangaka: { regex: /mangaka/gi, ui: { label: "mangaka", toLabel: "manga-ka", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  manhwaga: { regex: /manhwaga/gi, ui: { label: "manhwaga", toLabel: "manhwa-ga", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  manmade: { regex: /manmade/gi, ui: { label: "manmade", toLabel: "man-made", copy: "", paste: "", mw: "man-made", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  manpower: { regex: /manpower/gi, ui: { label: "manpower (available supply)", toLabel: "", copy: "manpower", paste: "", mw: "manpower", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  map_maker: { regex: /map-maker/gi, ui: { label: "map-maker", toLabel: "mapmaker", copy: "", paste: "", mw: "mapmaker", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mask_like: { regex: /mask-like/gi, ui: { label: "mask-like", toLabel: "masklike", copy: "", paste: "", mw: "masklike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mass_produce: { regex: /mass produce/gi, ui: { label: "mass produce", toLabel: "mass-produce", copy: "", paste: "", mw: "mass-produce", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mass_producing: { regex: /mass producing/gi, ui: { label: "mass producing", toLabel: "mass-producing", copy: "", paste: "", mw: "mass-produce", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mass_production: { regex: /mass-production/gi, ui: { label: "mass-production", toLabel: "mass production", copy: "", paste: "", mw: "mass production", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  masterclass: { regex: /masterclass/gi, ui: { label: "masterclass", toLabel: "master class", copy: "", paste: "", mw: "master class", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  match_up: { regex: /match-up/gi, ui: { label: "match-up", toLabel: "matchup", copy: "", paste: "", mw: "matchup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  maze_like: { regex: /maze-like/gi, ui: { label: "maze-like", toLabel: "mazelike", copy: "", paste: "", mw: "mazelike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  meagre: { regex: /meagre/gi, ui: { label: "meagre", toLabel: "meager", copy: "", paste: "", mw: "meager", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_air: { regex: /mid-air/gi, ui: { label: "mid-air", toLabel: "midair", copy: "", paste: "", mw: "midair", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_day: { regex: /mid-day/gi, ui: { label: "mid-day", toLabel: "midday", copy: "", paste: "", mw: "midday", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_forties: { regex: /mid-forties/gi, ui: { label: "mid-forties", toLabel: "midforties", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_morning: { regex: /mid-morning/i, ui: { label: "mid-morning", toLabel: "midmorning", copy: "", paste: "", mw: "midmorning", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_point: { regex: /mid-point/gi, ui: { label: "mid-point", toLabel: "midpoint", copy: "", paste: "", mw: "midpoint", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_section: { regex: /mid-section/gi, ui: { label: "mid-section", toLabel: "midsection", copy: "", paste: "", mw: "midsection", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_sentence: { regex: /mid-sentence/gi, ui: { label: "mid-sentence", toLabel: "midsentence", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_size: { regex: /mid-size/gi, ui: { label: "mid-size", toLabel: "midsize", copy: "", paste: "", mw: "midsize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_thirties: { regex: /mid-thirties/gi, ui: { label: "mid-thirties", toLabel: "midthirties", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mid_twenties: { regex: /mid-twenties/gi, ui: { label: "mid-twenties", toLabel: "midtwenties", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  milady: { regex: /Milady/g, ui: { label: "Milady", toLabel: "milady (?)", copy: "Milady", paste: "milady", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  milord: { regex: /Milord/g, ui: { label: "Milord", toLabel: "milord (?)", copy: "Milord", paste: "milord", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  mini_car: { regex: /mini-car/gi, ui: { label: "mini-car", toLabel: "minicar", copy: "", paste: "", mw: "minicar", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  miniscule: { regex: /miniscule/gi, ui: { label: "miniscule", toLabel: "minuscule", copy: "", paste: "", mw: "minuscule", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mischevious: { regex: /mischevious/gi, ui: { label: "mischevious", toLabel: "mischievous", copy: "", paste: "", mw: "mischievous", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  month_long: { regex: /month-long/gi, ui: { label: "month-long", toLabel: "monthlong", copy: "", paste: "", mw: "monthlong", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  mothership: { regex: /mothership/gi, ui: { label: "mothership", toLabel: "mother ship", copy: "", paste: "", mw: "mother ship", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  moustache: { regex: /moustache/gi, ui: { label: "moustache", toLabel: "mustache", copy: "", paste: "", mw: "mustache", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  multi_headed: { regex: /multi-headed/gi, ui: { label: "multi-headed", toLabel: "multiheaded", copy: "", paste: "", mw: "multiheaded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  multi_hyphen: { regex: /\bmulti-/gi, ui: { label: "multi-", toLabel: "multi (no hyphen)", copy: "multi-", paste: "multi", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  my_lady: { regex: /My Lady/g, ui: { label: "My Lady", toLabel: "my lady", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  my_lord: { regex: /My Lord/g, ui: { label: "My Lord", toLabel: "my lord", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  naive: { regex: /naïve/gi, ui: { label: "naïve", toLabel: "naive", copy: "", paste: "", mw: "naive", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  name_drop: { regex: /name drop/gi, ui: { label: "name drop", toLabel: "name-drop", copy: "", paste: "", mw: "name-drop", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  nametag: { regex: /nametag/gi, ui: { label: "nametag", toLabel: "name tag", copy: "", paste: "", mw: "name tag", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  nation_state: { regex: /nation state/gi, ui: { label: "nation state", toLabel: "nation-state", copy: "", paste: "", mw: "nation-state", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  natural_born: { regex: /natural born/gi, ui: { label: "natural born", toLabel: "natural-born", copy: "", paste: "", mw: "natural-born", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  near_hyphen: { regex: /\bnear-/gi, ui: { label: "near-", toLabel: "near (open?)", copy: "near-", paste: "near ", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  neverending: { regex: /neverending/gi, ui: { label: "neverending", toLabel: "never-ending", copy: "", paste: "", mw: "never-ending", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  new_found: { regex: /new found/gi, ui: { label: "new found", toLabel: "newfound", copy: "", paste: "", mw: "newfound", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  new_found2: { regex: /new-found/gi, ui: { label: "new-found", toLabel: "newfound", copy: "", paste: "", mw: "newfound", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  nm: { regex: /nevermind/gi, ui: { label: "nevermind", toLabel: "never mind", copy: "", paste: "", mw: "never mind", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_alcoholic: { regex: /non-alcoholic/gi, ui: { label: "non-alcoholic", toLabel: "nonalcoholic", copy: "", paste: "", mw: "nonalcoholic", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_answer: { regex: /non-answer/gi, ui: { label: "non-answer", toLabel: "nonanswer", copy: "", paste: "", mw: "nonanswer", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_combatant: { regex: /non-combatant/gi, ui: { label: "non-combatant", toLabel: "noncombatant", copy: "", paste: "", mw: "noncombatant", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_committal: { regex: /non-committal/gi, ui: { label: "non-committal", toLabel: "noncommittal", copy: "", paste: "", mw: "noncommittal", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_confrontational: { regex: /non-confrontational/gi, ui: { label: "non-confrontational", toLabel: "nonconfrontational", copy: "", paste: "", mw: "nonconfrontational", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_existent: { regex: /non-existent/gi, ui: { label: "non-existent", toLabel: "nonexistent", copy: "", paste: "", mw: "nonexistent", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_hero: { regex: /non-hero/gi, ui: { label: "non-hero", toLabel: "nonhero", copy: "", paste: "", mw: "nonhero", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_hyphen: { regex: /\bnon-/gi, ui: { label: "non-", toLabel: "remove hyphen?", copy: "non-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  non_intervention: { regex: /non-intervention/gi, ui: { label: "non-intervention", toLabel: "nonintervention", copy: "", paste: "", mw: "nonintervention", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_living: { regex: /non-living/gi, ui: { label: "non-living", toLabel: "nonliving", copy: "", paste: "", mw: "nonliving", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_negotiable: { regex: /non-negotiable/gi, ui: { label: "non-negotiable", toLabel: "nonnegotiable", copy: "", paste: "", mw: "nonnegotiable", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_participant: { regex: /non-participant/gi, ui: { label: "non-participant", toLabel: "nonparticipant", copy: "", paste: "", mw: "nonparticipant", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_sequitur: { regex: /non-sequitur/gi, ui: { label: "non-sequitur", toLabel: "non sequitur", copy: "", paste: "", mw: "non sequitur", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_standard: { regex: /non-standard/gi, ui: { label: "non-standard", toLabel: "nonstandard", copy: "", paste: "", mw: "nonstandard", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_stop: { regex: /non-stop/gi, ui: { label: "non-stop", toLabel: "nonstop", copy: "", paste: "", mw: "nonstop", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_threatening: { regex: /non-threatening/gi, ui: { label: "non-threatening", toLabel: "nonthreatening", copy: "", paste: "", mw: "nonthreatening", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  non_zero: { regex: /non-zero/gi, ui: { label: "non-zero", toLabel: "nonzero", copy: "", paste: "", mw: "nonzero", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  nonsequitur: { regex: /nonsequitur/gi, ui: { label: "nonsequitur", toLabel: "non sequitur", copy: "", paste: "", mw: "non sequitur", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  north_east: { regex: /north east/gi, ui: { label: "north east", toLabel: "northeast", copy: "", paste: "", mw: "northeast", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  north_west: { regex: /north west/gi, ui: { label: "north west", toLabel: "northwest", copy: "", paste: "", mw: "northwest", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  note_taking: { regex: /note taking/gi, ui: { label: "note taking", toLabel: "note-taking", copy: "", paste: "", mw: "note-taking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  notetaking: { regex: /notetaking/gi, ui: { label: "notetaking", toLabel: "note-taking", copy: "", paste: "", mw: "note-taking", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  number_one: { regex: /number-one/gi, ui: { label: "number-one", toLabel: "number one", copy: "", paste: "", mw: "number one", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  occured: { regex: /occured/gi, ui: { label: "occured", toLabel: "occurred", copy: "", paste: "", mw: "occur", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  occuring: { regex: /occuring/gi, ui: { label: "occuring", toLabel: "occurring", copy: "", paste: "", mw: "occur", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ocher: { regex: /ochre/gi, ui: { label: "ochre", toLabel: "ocher", copy: "", paste: "", mw: "ocher", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_balance: { regex: /off balance/gi, ui: { label: "off balance", toLabel: "off-balance", copy: "", paste: "", mw: "off-balance", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_center: { regex: /off center/gi, ui: { label: "off center", toLabel: "off-center", copy: "", paste: "", mw: "off-center", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_duty: { regex: /off-duty/gi, ui: { label: "off-duty", toLabel: "off duty", copy: "", paste: "", mw: "off duty", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_guard: { regex: /off-guard/gi, ui: { label: "off-guard", toLabel: "off guard", copy: "", paste: "", mw: "off guard", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_handed: { regex: /off-handed/gi, ui: { label: "off-handed", toLabel: "offhanded", copy: "", paste: "", mw: "offhanded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_limits: { regex: /off limits/gi, ui: { label: "off limits", toLabel: "off-limits", copy: "", paste: "", mw: "off-limits", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  off_putting: { regex: /off putting/gi, ui: { label: "off putting", toLabel: "off-putting", copy: "", paste: "", mw: "off-putting", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  offence: { regex: /offence/gi, ui: { label: "offence", toLabel: "offense", copy: "", paste: "", mw: "offense", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  offload: { regex: /offload/gi, ui: { label: "offload", toLabel: "off-load", copy: "", paste: "", mw: "off-load", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  omelette: { regex: /omelette/gi, ui: { label: "omelette", toLabel: "omelet", copy: "", paste: "", mw: "omelet", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  on_board: { regex: /on board/gi, ui: { label: "on board", toLabel: "onboard (adjective?)", copy: "on board", paste: "onboard", mw: "onboard", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  on_screen: { regex: /\bon screen\b/gi, ui: { label: "on screen", toLabel: "on-screen", copy: "\\bon screen\\b", paste: "on-screen", mw: "on-screen", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  on_site: { regex: /on site/gi, ui: { label: "on site", toLabel: "on-site", copy: "", paste: "", mw: "on-site", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  on_stage: { regex: /on-stage/gi, ui: { label: "on-stage", toLabel: "onstage", copy: "", paste: "", mw: "onstage", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  on_stage2: { regex: /on stage/gi, ui: { label: "on stage", toLabel: "onstage", copy: "", paste: "", mw: "onstage", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  one_on_one: { regex: /one on one/gi, ui: { label: "one on one", toLabel: "one-on-one", copy: "", paste: "", mw: "one-on-one", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  one_time: { regex: /one-time/gi, ui: { label: "one-time", toLabel: "onetime", copy: "", paste: "", mw: "onetime", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  onscreen: { regex: /onscreen/gi, ui: { label: "onscreen", toLabel: "on-screen", copy: "", paste: "", mw: "on-screen", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  oughta: { regex: /\boughta\b/gi, ui: { label: "oughta", toLabel: "oughtta", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  out_bluff: { regex: /out-bluff/gi, ui: { label: "out-bluff", toLabel: "outbluff", copy: "", paste: "", mw: "outbluff", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  over_excited: { regex: /over-excited/gi, ui: { label: "over-excited", toLabel: "overexcited", copy: "", paste: "", mw: "overexcited", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  over_extend: { regex: /over-extend/gi, ui: { label: "over-extend", toLabel: "overextend", copy: "", paste: "", mw: "overextend", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  over_familiar: { regex: /over-familiar/gi, ui: { label: "over-familiar", toLabel: "overfamiliar", copy: "", paste: "", mw: "overfamiliar", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  over_prepared: { regex: /over-prepared/gi, ui: { label: "over-prepared", toLabel: "overprepared", copy: "", paste: "", mw: "overprepared", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  over_protect: { regex: /over-protect/gi, ui: { label: "over-protect", toLabel: "overprotect", copy: "", paste: "", mw: "overprotect", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pain_killer: { regex: /pain-killer/gi, ui: { label: "pain-killer", toLabel: "painkiller", copy: "", paste: "", mw: "painkiller", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  paper_mache: { regex: /paper mache/gi, ui: { label: "paper mache", toLabel: "paper-mache or papier mâché", copy: "paper mache", paste: "", mw: "paper-mache", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  part_timer: { regex: /part timer/gi, ui: { label: "part timer", toLabel: "part-timer", copy: "", paste: "", mw: "part-timer", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  phase: { regex: /phase/gi, ui: { label: "phase", toLabel: "faze (verb?)", copy: "phase", paste: "faze", mw: "faze", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  photoshoot: { regex: /photoshoot/gi, ui: { label: "photoshoot", toLabel: "photo shoot", copy: "", paste: "", mw: "photo shoot", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  piecede: { regex: /piece de resistance/gi, ui: { label: "piece de resistance", toLabel: "pièce de résistance", copy: "", paste: "", mw: "pièce de résistance", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pipsqueak: { regex: /pipsqueak/gi, ui: { label: "pipsqueak", toLabel: "pip-squeak", copy: "", paste: "", mw: "pip-squeak", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  plain_clothes: { regex: /plain-clothes/gi, ui: { label: "plain-clothes", toLabel: "plainclothes", copy: "", paste: "", mw: "plainclothes", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  plantlife: { regex: /plantlife/gi, ui: { label: "plantlife", toLabel: "plant life", copy: "", paste: "", mw: "plant life", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  plead: { regex: /\bplead\b/gi, ui: { label: "plead (should be pled, past tense?)", toLabel: "", copy: "\\bplead\\b", paste: "", mw: "plead", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  plough: { regex: /plough/gi, ui: { label: "plough", toLabel: "plow", copy: "", paste: "", mw: "plow", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  point_blank: { regex: /point blank/gi, ui: { label: "point blank", toLabel: "point-blank", copy: "", paste: "", mw: "point-blank", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  post_haste: { regex: /\bpost-haste/gi, ui: { label: "post-haste", toLabel: "posthaste", copy: "", paste: "", mw: "posthaste", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  post_hyphen: { regex: /\bpost-/gi, ui: { label: "post-", toLabel: "remove hyphen?", copy: "post-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  pour_over: { regex: /pour over/gi, ui: { label: "pour over", toLabel: "pore over (?)", copy: "pour over", paste: "pore over", mw: "pore over", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  power_walk: { regex: /power-walk/gi, ui: { label: "power-walk", toLabel: "power walk", copy: "", paste: "", mw: "power walk", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pre_hyphen: { regex: /\bpre-/gi, ui: { label: "pre-", toLabel: "remove hyphen?", copy: "pre-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  principal: { regex: /principal/gi, ui: { label: "principal (head of a school)", toLabel: "", copy: "principal", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  principle: { regex: /principle/gi, ui: { label: "principle (concept)", toLabel: "", copy: "principle", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  pro_hyphen: { regex: /\bpro-/gi, ui: { label: "pro-", toLabel: "remove hyphen?", copy: "pro-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  psych: { regex: /psych[^e]\b/gi, ui: { label: "psych (verb)", toLabel: "", copy: "\\bpsych[^e]\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  psyche: { regex: /\bpsyche/gi, ui: { label: "psyche (noun)", toLabel: "", copy: "\\bpsyche", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  pubic: { regex: /pubic/gi, ui: { label: "pubic (public?)", toLabel: "", copy: "pubic", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  publically: { regex: /publically/gi, ui: { label: "publically", toLabel: "publicly", copy: "", paste: "", mw: "publicly", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  punch_line: { regex: /punch-line/gi, ui: { label: "punch-line", toLabel: "punch line", copy: "", paste: "", mw: "punch line", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  punchline: { regex: /punchline/gi, ui: { label: "punchline", toLabel: "punch line", copy: "", paste: "", mw: "punch line", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  puppet_like: { regex: /puppet-like/gi, ui: { label: "puppet-like", toLabel: "puppetlike", copy: "", paste: "", mw: "puppetlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pure_hearted: { regex: /pure-hearted/gi, ui: { label: "pure-hearted", toLabel: "purehearted", copy: "", paste: "", mw: "purehearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pureblooded: { regex: /pureblooded/gi, ui: { label: "pureblooded", toLabel: "pure-blooded", copy: "", paste: "", mw: "pure-blooded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  pushup: { regex: /pushup/gi, ui: { label: "pushup", toLabel: "push-up", copy: "", paste: "", mw: "push-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rag_tag: { regex: /rag-tag/gi, ui: { label: "rag-tag", toLabel: "ragtag", copy: "", paste: "", mw: "ragtag", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ragdoll: { regex: /ragdoll/gi, ui: { label: "ragdoll", toLabel: "rag doll", copy: "", paste: "", mw: "rag doll", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  railgun: { regex: /railgun/gi, ui: { label: "railgun", toLabel: "rail gun", copy: "", paste: "", mw: "rail gun", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rain_drop: { regex: /rain drop/gi, ui: { label: "rain drop", toLabel: "raindrop", copy: "", paste: "", mw: "raindrop", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_absorb: { regex: /re-absorb/gi, ui: { label: "re-absorb", toLabel: "reabsorb", copy: "", paste: "", mw: "reabsorb", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_categorize: { regex: /re-categorize/gi, ui: { label: "re-categorize", toLabel: "recategorize", copy: "", paste: "", mw: "recategorize", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_enact: { regex: /re-enact/gi, ui: { label: "re-enact", toLabel: "reenact", copy: "", paste: "", mw: "reenact", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_evaluate: { regex: /re-evaluate/gi, ui: { label: "re-evaluate", toLabel: "reevaluate", copy: "", paste: "", mw: "reevaluate", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_examine: { regex: /re-examine/gi, ui: { label: "re-examine", toLabel: "reexamine", copy: "", paste: "", mw: "reexamine", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  re_hyphen: { regex: /\bre-/gi, ui: { label: "re-", toLabel: "remove hyphen?", copy: "re-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  re_write: { regex: /re-write/gi, ui: { label: "re-write", toLabel: "rewrite", copy: "", paste: "", mw: "rewrite", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rear_view_mirror: { regex: /rear view mirror/gi, ui: { label: "rear view mirror", toLabel: "rearview mirror", copy: "", paste: "", mw: "rearview mirror", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rear_view_mirror2: { regex: /rear-view mirror/gi, ui: { label: "rear-view mirror", toLabel: "rearview mirror", copy: "", paste: "", mw: "rearview mirror", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  red_faced: { regex: /red faced/gi, ui: { label: "red faced", toLabel: "red-faced", copy: "", paste: "", mw: "red-faced", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  reign_in: { regex: /reign in/gi, ui: { label: "reign in", toLabel: "rein in (?)", copy: "reign in", paste: "rein in", mw: "rein in", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  reigned_in: { regex: /reigned in/gi, ui: { label: "reigned in", toLabel: "reined in (?)", copy: "reigned in", paste: "reined in", mw: "rein in", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  reigning_in: { regex: /reigning in/gi, ui: { label: "reigning in", toLabel: "reining in (?)", copy: "reigning in", paste: "reined in", mw: "rein in", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  revery: { regex: /revery/gi, ui: { label: "revery", toLabel: "reverie", copy: "", paste: "", mw: "reverie", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  ribcage: { regex: /ribcage/gi, ui: { label: "ribcage", toLabel: "rib cage", copy: "", paste: "", mw: "rib cage", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  right_hand_man: { regex: /right hand man/gi, ui: { label: "right hand man", toLabel: "right-hand man", copy: "", paste: "", mw: "right-hand man", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rip: { regex: /\br\.i\.p\.?\b/gi, ui: { label: "R.I.P", toLabel: "RIP", copy: "", paste: "", mw: "RIP", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  risque: { regex: /risque/gi, ui: { label: "risque", toLabel: "risqué", copy: "", paste: "", mw: "risqué", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  river_bank: { regex: /river bank/gi, ui: { label: "river bank", toLabel: "riverbank", copy: "", paste: "", mw: "riverbank", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  river_bank2: { regex: /river-bank/gi, ui: { label: "river-bank", toLabel: "riverbank", copy: "", paste: "", mw: "riverbank", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  role_play: { regex: /role play/gi, ui: { label: "role play", toLabel: "role-play (verb?)", copy: "role play", paste: "role-play", mw: "role-play", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  roleplay: { regex: /roleplay/gi, ui: { label: "roleplay", toLabel: "role-play", copy: "", paste: "", mw: "role-play", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  rom_com: { regex: /rom-com/gi, ui: { label: "rom-com", toLabel: "romcom", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  rough_and_tumble: { regex: /rough and tumble/gi, ui: { label: "rough and tumble", toLabel: "rough-and-tumble", copy: "", paste: "", mw: "rough-and-tumble", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  round_robin: { regex: /round robin/gi, ui: { label: "round robin", toLabel: "round-robin", copy: "", paste: "", mw: "round-robin", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  run_down: { regex: /run-down/gi, ui: { label: "run-down (adjective)", toLabel: "", copy: "run-down", paste: "", mw: "run-down", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  run_down2: { regex: /run down/gi, ui: { label: "run down (verb)", toLabel: "", copy: "run down", paste: "", mw: "run down", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  run_in: { regex: /run in\b/gi, ui: { label: "run in (verb)", toLabel: "", copy: "run in\\b", paste: "", mw: "run in", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  run_in2: { regex: /run-in/gi, ui: { label: "run-in (noun)", toLabel: "", copy: "run-in", paste: "", mw: "run-in", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  rundown: { regex: /rundown/gi, ui: { label: "rundown (noun)", toLabel: "", copy: "rundown", paste: "", mw: "rundown", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  saddle_bag: { regex: /saddle bag/gi, ui: { label: "saddle bag", toLabel: "saddlebag", copy: "", paste: "", mw: "saddlebag", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  saute: { regex: /saute/gi, ui: { label: "saute", toLabel: "sauté", copy: "", paste: "", mw: "sauté", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  saw_like: { regex: /saw-like/gi, ui: { label: "saw-like", toLabel: "sawlike", copy: "", paste: "", mw: "sawlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  scot_free: { regex: /scot free/gi, ui: { label: "scot free", toLabel: "scot-free", copy: "", paste: "", mw: "scot-free", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sea_water: { regex: /sea water/gi, ui: { label: "sea water", toLabel: "seawater", copy: "", paste: "", mw: "seawater", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  seatbelt: { regex: /seatbelt/gi, ui: { label: "seatbelt", toLabel: "seat belt", copy: "", paste: "", mw: "seat belt", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  second_guess: { regex: /second guess/gi, ui: { label: "second guess", toLabel: "second-guess (verb?)", copy: "", paste: "", mw: "second-guess", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  second_hand: { regex: /second-hand/gi, ui: { label: "second-hand", toLabel: "secondhand", copy: "", paste: "", mw: "secondhand", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  second_in_command: { regex: /second in command/gi, ui: { label: "second in command", toLabel: "second-in-command", copy: "", paste: "", mw: "second-in-command", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  second_years: { regex: /second years/gi, ui: { label: "second years", toLabel: "second-years (noun?)", copy: "second years", paste: "second-years", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  self_expression: { regex: /self expression/gi, ui: { label: "self expression", toLabel: "self-expression", copy: "", paste: "", mw: "self-expression", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  self_pity: { regex: /self pity/gi, ui: { label: "self pity", toLabel: "self-pity", copy: "", paste: "", mw: "self-pity", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_circle: { regex: /semi-circle/gi, ui: { label: "semi-circle", toLabel: "semicircle", copy: "", paste: "", mw: "semicircle", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_conscious: { regex: /semi-conscious/gi, ui: { label: "semi-conscious", toLabel: "semiconscious", copy: "", paste: "", mw: "semiconscious", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_final: { regex: /semi-final/gi, ui: { label: "semi-final(s)", toLabel: "semifinal(s)", copy: "semi-final", paste: "semifinal", mw: "semifinal", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  semi_hyphen: { regex: /\bsemi-/gi, ui: { label: "semi-", toLabel: "remove hyphen?", copy: "semi-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  semi_translucent: { regex: /semi-translucent/gi, ui: { label: "semi-translucent", toLabel: "semitranslucent", copy: "", paste: "", mw: "semitranslucent", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_transparent: { regex: /semi-transparent/gi, ui: { label: "semi-transparent", toLabel: "semitransparent", copy: "", paste: "", mw: "semitransparent", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_truck: { regex: /semi truck/gi, ui: { label: "semi truck", toLabel: "semitruck", copy: "", paste: "", mw: "semitruck", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  semi_truck2: { regex: /semi-truck/gi, ui: { label: "semi-truck", toLabel: "semitruck", copy: "", paste: "", mw: "semitruck", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  shakeup: { regex: /shakeup/gi, ui: { label: "shakeup", toLabel: "shake-up", copy: "", paste: "", mw: "shake-up", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  shapeshift: { regex: /shapeshift/gi, ui: { label: "shapeshift", toLabel: "shape-shift", copy: "", paste: "", mw: "shape-shift", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sheath: { regex: /sheath[^e]/gi, ui: { label: "sheath (noun)", toLabel: "", copy: "sheath[^e]", paste: "", mw: "sheath", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  sheathe: { regex: /sheathe/gi, ui: { label: "sheathe (verb)", toLabel: "", copy: "sheathe", paste: "", mw: "sheathe", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  shockwave: { regex: /shockwave/gi, ui: { label: "shockwave", toLabel: "shock wave", copy: "", paste: "", mw: "shock wave", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  shojo: { regex: /shojo/gi, ui: { label: "shojo", toLabel: "shoujo", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  shonen: { regex: /shonen/gi, ui: { label: "shonen", toLabel: "shounen", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.YP]}, 
  shootout: { regex: /shootout/gi, ui: { label: "shootout", toLabel: "shoot-out", copy: "", paste: "", mw: "shoot-out", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  short_sighted: { regex: /short-sighted/gi, ui: { label: "short-sighted", toLabel: "shortsighted", copy: "", paste: "", mw: "shortsighted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  shoulder_to_shoulder: { regex: /shoulder-to-shoulder/gi, ui: { label: "shoulder-to-shoulder", toLabel: "shoulder to shoulder", copy: "", paste: "", mw: "shoulder to shoulder", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  shuteye: { regex: /shuteye/gi, ui: { label: "shuteye", toLabel: "shut-eye", copy: "", paste: "", mw: "shut-eye", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  side_by_side: { regex: /side by side/gi, ui: { label: "side by side (adverb)", toLabel: "", copy: "side by side", paste: "", mw: "side by side", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  side_by_side2: { regex: /side-by-side/gi, ui: { label: "side-by-side (adjective)", toLabel: "", copy: "side-by-side", paste: "", mw: "side-by-side", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  side_effect: { regex: /side-effect/gi, ui: { label: "side-effect", toLabel: "side effect", copy: "", paste: "", mw: "side effect", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  signalling: { regex: /signalling/gi, ui: { label: "signalling", toLabel: "signaling", copy: "", paste: "", mw: "signal", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  silk_like: { regex: /silk-like/gi, ui: { label: "silk-like", toLabel: "silklike", copy: "", paste: "", mw: "silklike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  simple_minded: { regex: /simple-minded/gi, ui: { label: "simple-minded", toLabel: "simpleminded", copy: "", paste: "", mw: "simpleminded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  single_file: { regex: /single-file/gi, ui: { label: "single-file", toLabel: "single file", copy: "", paste: "", mw: "single file", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  singlehanded: { regex: /singlehanded/gi, ui: { label: "singlehanded", toLabel: "single-handed", copy: "", paste: "", mw: "single-handed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  singleminded: { regex: /singleminded/gi, ui: { label: "singleminded", toLabel: "single-minded", copy: "", paste: "", mw: "single-minded", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sizeable: { regex: /sizeable/gi, ui: { label: "sizeable", toLabel: "sizable", copy: "", paste: "", mw: "sizable", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  skillset: { regex: /skillset/gi, ui: { label: "skillset", toLabel: "skill set", copy: "", paste: "", mw: "skill set", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sky_high: { regex: /sky high/gi, ui: { label: "sky high", toLabel: "sky-high ", copy: "", paste: "", mw: "sky-high", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  slayed: { regex: /slayed/gi, ui: { label: "slayed (comedy?)", toLabel: "slew (murder?)", copy: "slayed", paste: "slew", mw: "slay", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  slip_up: { regex: /slip-up/gi, ui: { label: "slip-up", toLabel: "slipup", copy: "", paste: "", mw: "slipup", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smack_dab: { regex: /smack dab/gi, ui: { label: "smack dab", toLabel: "smack-dab", copy: "", paste: "", mw: "smack-dab", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smart_phone: { regex: /smart phone/gi, ui: { label: "smart phone", toLabel: "smartphone", copy: "", paste: "", mw: "smartphone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smoke_screen: { regex: /smoke-screen/gi, ui: { label: "smoke-screen", toLabel: "smoke screen", copy: "", paste: "", mw: "smoke screen", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smokescreen: { regex: /smokescreen/gi, ui: { label: "smokescreen", toLabel: "smoke screen", copy: "", paste: "", mw: "smoke screen", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smokey: { regex: /smokey/gi, ui: { label: "smokey", toLabel: "smoky", copy: "", paste: "", mw: "smoky", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  smoulder: { regex: /smoulder/gi, ui: { label: "smoulder", toLabel: "smolder", copy: "", paste: "", mw: "smolder", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  soft_hearted: { regex: /soft-hearted/gi, ui: { label: "soft-hearted", toLabel: "softhearted", copy: "", paste: "", mw: "softhearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  soft_serve: { regex: /soft-serve/gi, ui: { label: "soft-serve", toLabel: "soft serve", copy: "", paste: "", mw: "soft serve", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  soul: { regex: /soul mate/gi, ui: { label: "soul mate", toLabel: "soulmate", copy: "", paste: "", mw: "soulmate", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  soundwave: { regex: /soundwave/gi, ui: { label: "soundwave", toLabel: "sound wave", copy: "", paste: "", mw: "sound wave", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  south_east: { regex: /south east/gi, ui: { label: "south east", toLabel: "southeast", copy: "", paste: "", mw: "southeast", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  south_west: { regex: /south west/gi, ui: { label: "south west", toLabel: "southwest", copy: "", paste: "", mw: "southwest", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  space_time: { regex: /space time/gi, ui: { label: "space time", toLabel: "space-time (?)", copy: "space time", paste: "space-time", mw: "space-time", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  spacetime: { regex: /spacetime/gi, ui: { label: "spacetime", toLabel: "space-time", copy: "", paste: "", mw: "space-time", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  spilt: { regex: /\bspilt\b/gi, ui: { label: "spilt", toLabel: "spilled", copy: "", paste: "", mw: "spill", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  spine_like: { regex: /spine-like/gi, ui: { label: "spine-like", toLabel: "spinelike", copy: "", paste: "", mw: "spinelike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  split_second1: { regex: /split second/gi, ui: { label: "split second (noun?)", toLabel: "", copy: "split second", paste: "", mw: "split second", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  split_second2: { regex: /split-second/gi, ui: { label: "split-second (adj?)", toLabel: "", copy: "split-second", paste: "", mw: "split-second", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  spread_eagle: { regex: /spread eagle/gi, ui: { label: "spread eagle", toLabel: "spread-eagle", copy: "", paste: "", mw: "spread-eagle", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  stand_out: { regex: /stand-out/gi, ui: { label: "stand-out", toLabel: "standout", copy: "", paste: "", mw: "standout", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  standalone: { regex: /standalone/gi, ui: { label: "standalone", toLabel: "stand-alone", copy: "", paste: "", mw: "stand-alone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  stepping_stone: { regex: /stepping-stone/gi, ui: { label: "stepping-stone", toLabel: "stepping stone", copy: "", paste: "", mw: "stepping stone", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  stock_still: { regex: /stock still/gi, ui: { label: "stock still", toLabel: "stock-still", copy: "", paste: "", mw: "stock-still", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  stomach_ache: { regex: /stomach ache/gi, ui: { label: "stomach ache", toLabel: "stomachache", copy: "", paste: "", mw: "stomachache", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  stone_like: { regex: /stone-like/gi, ui: { label: "stone-like", toLabel: "stonelike", copy: "", paste: "", mw: "stonelike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  story_line: { regex: /story line/gi, ui: { label: "story line", toLabel: "storyline", copy: "", paste: "", mw: "storyline", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  straight_away: { regex: /straight away/gi, ui: { label: "straight away", toLabel: "straightaway", copy: "", paste: "", mw: "straightaway", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  strait: { regex: /straightlaced/gi, ui: { label: "straightlaced", toLabel: "straitlaced", copy: "", paste: "", mw: "straitlaced", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  street_light: { regex: /street light/gi, ui: { label: "street light", toLabel: "streetlight", copy: "", paste: "", mw: "streetlight", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  strong_arm: { regex: /\bstrong arm\b/gi, ui: { label: "strong arm", toLabel: "strong-arm (verb?)", copy: "\\bstrong arm\\b", paste: "strong-arm", mw: "strong-arm", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  sub_par: { regex: /sub-par/gi, ui: { label: "sub-par", toLabel: "subpar", copy: "", paste: "", mw: "subpar", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sub_zero: { regex: /sub-zero/gi, ui: { label: "sub-zero", toLabel: "subzero", copy: "", paste: "", mw: "subzero", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  sun_tan: { regex: /sun-tan/gi, ui: { label: "sun-tan", toLabel: "suntan", copy: "", paste: "", mw: "suntan", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  super_duper: { regex: /super duper/gi, ui: { label: "super duper", toLabel: "super-duper", copy: "", paste: "", mw: "super-duper", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  super_hyphen: { regex: /\bsuper-/gi, ui: { label: "super-", toLabel: "remove hyphen?", copy: "super-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  swiss: { regex: /swiss cheese/g, ui: { label: "swiss cheese", toLabel: "Swiss cheese", copy: "", paste: "", mw: "Swiss cheese", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  swordfight: { regex: /swordfight/gi, ui: { label: "swordfight", toLabel: "sword fight", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  t_shirt: { regex: /t-shirt/g, ui: { label: "t-shirt", toLabel: "T-shirt", copy: "", paste: "", mw: "T-shirt", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tank_like: { regex: /tank-like/gi, ui: { label: "tank-like", toLabel: "tanklike", copy: "", paste: "", mw: "tanklike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tastebud: { regex: /tastebud/gi, ui: { label: "tastebud", toLabel: "taste bud", copy: "", paste: "", mw: "taste bud", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tax_payer: { regex: /tax-payer/gi, ui: { label: "tax-payer", toLabel: "taxpayer", copy: "", paste: "", mw: "taxpayer", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tax_paying: { regex: /tax-paying/gi, ui: { label: "tax-paying", toLabel: "taxpaying", copy: "", paste: "", mw: "taxpaying", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tear_stain: { regex: /tear stain/gi, ui: { label: "tear stain", toLabel: "tearstain", copy: "", paste: "", mw: "tearstain", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tell_tale: { regex: /tell-tale/gi, ui: { label: "tell-tale", toLabel: "telltale", copy: "", paste: "", mw: "telltale", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  test_drive: { regex: /test drive/gi, ui: { label: "test drive", toLabel: "test-drive", copy: "", paste: "", mw: "test-drive", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  test_run: { regex: /test-run/gi, ui: { label: "test-run", toLabel: "test run", copy: "", paste: "", mw: "test run", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  testdrive: { regex: /testdrive/gi, ui: { label: "testdrive", toLabel: "test-drive", copy: "", paste: "", mw: "test-drive", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  testrun: { regex: /testrun/gi, ui: { label: "testrun", toLabel: "test run", copy: "", paste: "", mw: "test run", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tete_a_tete: { regex: /tete-a-tete/gi, ui: { label: "tete-a-tete", toLabel: "tête-à-tête", copy: "", paste: "", mw: "tête-à-tête", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  third_years: { regex: /third years/gi, ui: { label: "third years", toLabel: "third-years (noun?)", copy: "third years", paste: "third-years", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  three_fold: { regex: /three-fold/gi, ui: { label: "three-fold", toLabel: "threefold", copy: "", paste: "", mw: "threefold", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  thrusted: { regex: /thrusted/gi, ui: { label: "thrusted", toLabel: "thrust (past tense)", copy: "thrusted", paste: "thrust", mw: "thrust", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  time_worn: { regex: /time-worn/gi, ui: { label: "time-worn", toLabel: "timeworn", copy: "", paste: "", mw: "timeworn", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  timeframe: { regex: /timeframe/gi, ui: { label: "timeframe", toLabel: "time frame", copy: "", paste: "", mw: "time frame", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  timestamp: { regex: /timestamp/gi, ui: { label: "timestamp", toLabel: "time stamp", copy: "", paste: "", mw: "time stamp", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tipoff: { regex: /tipoff/gi, ui: { label: "tipoff", toLabel: "tip-off", copy: "", paste: "", mw: "tip-off", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  toe_to_toe: { regex: /toe-to-toe/gi, ui: { label: "toe-to-toe", toLabel: "toe to toe", copy: "", paste: "", mw: "toe to toe", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  top_secret: { regex: /top-secret/gi, ui: { label: "top-secret", toLabel: "top secret", copy: "", paste: "", mw: "top secret", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  touchy_feely: { regex: /touchy feely/gi, ui: { label: "touchy feely", toLabel: "touchy-feely", copy: "", paste: "", mw: "touchy-feely", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tradeoff: { regex: /tradeoff/gi, ui: { label: "tradeoff", toLabel: "trade-off", copy: "", paste: "", mw: "trade-off", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  trash_talk: { regex: /trash talk/gi, ui: { label: "trash talk (noun)", toLabel: "", copy: "trash talk", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  trash_talk2: { regex: /trash-talk/gi, ui: { label: "trash-talk (verb)", toLabel: "", copy: "trash-talk", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  travelled: { regex: /travelled/gi, ui: { label: "travelled", toLabel: "traveled", copy: "", paste: "", mw: "travel", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  traveller: { regex: /traveller/gi, ui: { label: "traveller", toLabel: "traveler", copy: "", paste: "", mw: "traveler", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  travelling: { regex: /travelling/gi, ui: { label: "travelling", toLabel: "traveling", copy: "", paste: "", mw: "travel", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  tried_and_true: { regex: /tried and true/gi, ui: { label: "tried and true", toLabel: "tried-and-true (adjective?)", copy: "tried and true", paste: "tried-and-true", mw: "tried-and-true", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  twentyfourseven: { regex: /twenty-four-seven/gi, ui: { label: "twenty-four-seven", toLabel: "twenty-four seven", copy: "", paste: "", mw: "twenty-four seven", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  twin_tail: { regex: /twin tail/gi, ui: { label: "twin tail", toLabel: "pigtail", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  twin_tail2: { regex: /twin-tail/gi, ui: { label: "twin-tail", toLabel: "pigtail", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  twintail: { regex: /twintail/gi, ui: { label: "twintail", toLabel: "pigtail", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  two_fold: { regex: /two-fold/gi, ui: { label: "two-fold ", toLabel: "twofold", copy: "", paste: "", mw: "twofold", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  two_on_two: { regex: /two on two/gi, ui: { label: "two on two", toLabel: "two-on-two", copy: "", paste: "", mw: "two-on-two", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  uh_huh: { regex: /\buh huh/gi, ui: { label: "uh huh", toLabel: "uh-huh", copy: "", paste: "", mw: "uh-huh", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  uh_oh: { regex: /\buh oh\b/gi, ui: { label: "uh oh", toLabel: "uh-oh", copy: "\\buh oh\\b", paste: "uh-oh", mw: "uh-oh", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  ultra_thin: { regex: /ultra-thin/gi, ui: { label: "ultra-thin", toLabel: "ultrathin", copy: "", paste: "", mw: "ultrathin", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  un_hyphen: { regex: /\bun-/gi, ui: { label: "un-", toLabel: "remove hyphen?", copy: "un-", paste: "", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  underaged: { regex: /underaged/gi, ui: { label: "underaged", toLabel: "underage", copy: "", paste: "", mw: "underage", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  unnamable: { regex: /unnamable/gi, ui: { label: "unnamable", toLabel: "unnameable", copy: "", paste: "", mw: "unnameable", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  unshakeable: { regex: /unshakeable/gi, ui: { label: "unshakeable", toLabel: "unshakable", copy: "", paste: "", mw: "unshakable", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  up_front: { regex: /up-front/gi, ui: { label: "up-front (adjective)", toLabel: "", copy: "up-front", paste: "", mw: "up-front", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  up_front2: { regex: /up front/gi, ui: { label: "up front (adverb)", toLabel: "", copy: "up front", paste: "", mw: "up front", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  upperhand: { regex: /upperhand/gi, ui: { label: "upperhand", toLabel: "upper hand", copy: "", paste: "", mw: "upper hand", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  vermillion: { regex: /vermillion/gi, ui: { label: "vermillion", toLabel: "vermilion", copy: "", paste: "", mw: "vermilion", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  vice_like: { regex: /vice-like/gi, ui: { label: "vice-like", toLabel: "viselike", copy: "", paste: "", mw: "viselike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  vice_versa: { regex: /vice-versa/gi, ui: { label: "vice-versa", toLabel: "vice versa", copy: "", paste: "", mw: "vice versa", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  vicelike: { regex: /vicelike/gi, ui: { label: "vicelike", toLabel: "viselike", copy: "", paste: "", mw: "viselike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  videogame: { regex: /videogame/gi, ui: { label: "videogame", toLabel: "video game", copy: "", paste: "", mw: "video game", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  vocal_chord: { regex: /vocal chord/gi, ui: { label: "vocal chord", toLabel: "vocal cord", copy: "", paste: "", mw: "vocal cord", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wake_up_call: { regex: /wake up call/gi, ui: { label: "wake up call", toLabel: "wake-up call", copy: "", paste: "", mw: "wake-up call", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  walkthrough: { regex: /walkthrough/gi, ui: { label: "walkthrough", toLabel: "walk-through", copy: "", paste: "", mw: "walk-through", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wash_bowl: { regex: /wash bowl/gi, ui: { label: "wash bowl", toLabel: "washbowl (noun?)", copy: "wash bowl", paste: "washbowl", mw: "washbowl", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  watch_tower: { regex: /watch tower/gi, ui: { label: "watch tower", toLabel: "watchtower", copy: "", paste: "", mw: "watchtower", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  web_site: { regex: /web site/gi, ui: { label: "web site", toLabel: "website", copy: "", paste: "", mw: "website", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  week_long: { regex: /week-long/gi, ui: { label: "week-long", toLabel: "weeklong", copy: "", paste: "", mw: "weeklong", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wellbeing: { regex: /wellbeing/gi, ui: { label: "wellbeing", toLabel: "well-being", copy: "", paste: "", mw: "well-being", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wellkempt: { regex: /well-kempt/gi, ui: { label: "well-kempt", toLabel: "well-kept", copy: "", paste: "", mw: "well-kept", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  whole_hearted: { regex: /whole-hearted/gi, ui: { label: "whole-hearted", toLabel: "wholehearted", copy: "", paste: "", mw: "wholehearted", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wide_eyed: { regex: /wide eyed/gi, ui: { label: "wide eyed", toLabel: "wide-eyed", copy: "", paste: "", mw: "wide-eyed", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wide_spread: { regex: /wide-spread/gi, ui: { label: "wide-spread", toLabel: "widespread", copy: "", paste: "", mw: "widespread", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wild_goose_chase: { regex: /wild goose chase/gi, ui: { label: "wild goose chase", toLabel: "wild-goose chase", copy: "", paste: "", mw: "wild-goose chase", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  willy_nilly: { regex: /willy nilly/gi, ui: { label: "willy nilly", toLabel: "willy-nilly", copy: "", paste: "", mw: "willy-nilly", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  wishlist: { regex: /wishlist/gi, ui: { label: "wishlist", toLabel: "wish list", copy: "", paste: "", mw: "wish list", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  witch_like: { regex: /witch-like/gi, ui: { label: "witch-like", toLabel: "witchlike", copy: "", paste: "", mw: "witchlike", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  woah: { regex: /woah/gi, ui: { label: "woah", toLabel: "whoa", copy: "", paste: "", mw: "whoa", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  woo_hoo: { regex: /woo hoo/gi, ui: { label: "woo hoo", toLabel: "woo-hoo", copy: "", paste: "", mw: "woo-hoo", copyLabels: true}, type: IssueType.SP, styleGuides: [StyleGuide.JNC]}, 
  woohoo: { regex: /woohoo/gi, ui: { label: "woohoo", toLabel: "woo-hoo", copy: "", paste: "", mw: "woo-hoo", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  work_room: { regex: /\bwork room\b/gi, ui: { label: "work room", toLabel: "workroom", copy: "\\bwork room\\b", paste: "workroom", mw: "workroom", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  workaround: { regex: /workaround/gi, ui: { label: "workaround", toLabel: "work-around", copy: "", paste: "", mw: "work-around", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  world_building: { regex: /world building/gi, ui: { label: "world building", toLabel: "world-building", copy: "", paste: "", mw: "world-building", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  worldbuilding: { regex: /worldbuilding/gi, ui: { label: "worldbuilding", toLabel: "world-building", copy: "", paste: "", mw: "world-building", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  worshiper: { regex: /worshiper/gi, ui: { label: "worshiper", toLabel: "worshipper", copy: "", paste: "", mw: "worshipper", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  worshiping: { regex: /worshiping/gi, ui: { label: "worshiping", toLabel: "worshipping", copy: "", paste: "", mw: "worship", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  worst_case_scenario: { regex: /worst case scenario/gi, ui: { label: "worst case scenario", toLabel: "worst-case scenario", copy: "", paste: "", mw: "worst-case", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  yada_yada: { regex: /yada-yada/gi, ui: { label: "yada-yada", toLabel: "yada yada", copy: "", paste: "", mw: "yada yada", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  year_long: { regex: /year-long/gi, ui: { label: "year-long", toLabel: "yearlong", copy: "", paste: "", mw: "yearlong", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  your_grace1: { regex: /your grace/g, ui: { label: "your grace", toLabel: "Your Grace (title?)", copy: "your grace", paste: "Your Grace", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  your_grace2: { regex: /your Grace/g, ui: { label: "your Grace", toLabel: "Your Grace", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  your_grace3: { regex: /Your grace/g, ui: { label: "Your grace", toLabel: "Your Grace (title?)", copy: "Your grace", paste: "Your Grace", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  your_highness1: { regex: /your highness/g, ui: { label: "your highness", toLabel: "Your Highness (title?)", copy: "your highness", paste: "Your Highness", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  your_highness2: { regex: /your Highness/g, ui: { label: "your Highness", toLabel: "Your Highness", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  your_highness3: { regex: /Your highness/g, ui: { label: "Your highness", toLabel: "Your Highness (title?)", copy: "Your highness", paste: "Your Highness", mw: "", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  your_majesty1: { regex: /your majesty/g, ui: { label: "your majesty", toLabel: "Your Majesty (title?)", copy: "your majesty", paste: "Your Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  your_majesty2: { regex: /your Majesty/g, ui: { label: "your Majesty", toLabel: "Your Majesty", copy: "", paste: "", mw: "majesty", copyLabels: true}, type: IssueType.SP, styleGuides: []}, 
  your_majesty3: { regex: /Your majesty/g, ui: { label: "Your majesty", toLabel: "Your Majesty (title?)", copy: "Your majesty", paste: "Your Majesty", mw: "majesty", copyLabels: false}, type: IssueType.SP, styleGuides: []}, 
  all_of: { regex: /\ball of\b/gi, ui: { label: "all of", toLabel: "all (?)", copy: "\\ball of\\b", paste: "all", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  inside_of: { regex: /inside of\b/gi, ui: { label: "inside of", toLabel: "inside (?)", copy: "inside of\\b", paste: "inside", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  know_that: { regex: /know that/gi, ui: { label: "know that", toLabel: "(delete that?)", copy: "know that", paste: "", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  off_of: { regex: /\boff of\b/gi, ui: { label: "off of", toLabel: "off (?)", copy: "\\boff of\\b", paste: "off", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  outside_of: { regex: /outside of\b/gi, ui: { label: "outside of", toLabel: "outside (?)", copy: "outside of\\b", paste: "outside", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  say_that: { regex: /say that/gi, ui: { label: "say that", toLabel: "(delete that?)", copy: "say that", paste: "", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  think_that: { regex: /think that/gi, ui: { label: "think that", toLabel: "(delete that?)", copy: "think that", paste: "", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  tomorrow: { regex: /tomorrow/gi, ui: { label: "tomorrow", toLabel: "the next day (in narration)", copy: "tomorrow", paste: "", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  yesterday: { regex: /yesterday/gi, ui: { label: "yesterday", toLabel: "the previous day (in narration)", copy: "yesterday", paste: "", mw: "", copyLabels: false}, type: IssueType.RW, styleGuides: [StyleGuide.YP]}, 
  afterward: { regex: /afterward($|[^s])/gi, ui: { label: "afterward", toLabel: "", copy: "afterward[^s]", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  afterwards: { regex: /afterwards/gi, ui: { label: "afterwards", toLabel: "", copy: "afterwards", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  afterwards2: { regex: /afterwards/gi, ui: { label: "afterwards", toLabel: "afterward", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  amid: { regex: /\bamid\b/gi, ui: { label: "amid", toLabel: "", copy: "\\bamid\\b", paste: "", mw: "amid", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  amidst: { regex: /\bamidst\b/gi, ui: { label: "amidst", toLabel: "", copy: "", paste: "", mw: "amid", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  among: { regex: /\bamong\b/gi, ui: { label: "among", toLabel: "", copy: "\\bamong\\b", paste: "", mw: "among", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  amongst: { regex: /\bamongst\b/gi, ui: { label: "amongst", toLabel: "", copy: "", paste: "", mw: "among", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  any_more: { regex: /\bany more\b/gi, ui: { label: "any more", toLabel: "", copy: "\\bany more\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  anymore: { regex: /\banymore\b/gi, ui: { label: "anymore", toLabel: "", copy: "\\banymore\\b", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  backward: { regex: /\bbackward\b/gi, ui: { label: "backward", toLabel: "", copy: "", paste: "", mw: "backward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  backwards: { regex: /\bbackwards\b/gi, ui: { label: "backwards", toLabel: "", copy: "", paste: "", mw: "backward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  backwards2: { regex: /backwards/gi, ui: { label: "backwards", toLabel: "backward", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  blond: { regex: /blond($|[^e])/gi, ui: { label: "blond (masculine)", toLabel: "", copy: "blond", paste: "", mw: "blond", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  blonde: { regex: /blonde/gi, ui: { label: "blonde (feminine)", toLabel: "", copy: "blonde", paste: "", mw: "blonde", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  dived: { regex: /\bdived\b/gi, ui: { label: "dived", toLabel: "", copy: "\\bdived\\b", paste: "", mw: "dive", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  dove: { regex: /\bdove\b/gi, ui: { label: "dove (verb)", toLabel: "", copy: "\\bdove\\b", paste: "", mw: "dive", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  downward: { regex: /\bdownward\b/gi, ui: { label: "downward", toLabel: "", copy: "", paste: "", mw: "downward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  downwards: { regex: /\bdownwards\b/gi, ui: { label: "downwards", toLabel: "", copy: "", paste: "", mw: "downward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  downwards2: { regex: /\bdownwards\b/gi, ui: { label: "downwards", toLabel: "downward", copy: "", paste: "", mw: "downward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  dreamed: { regex: /\bdreamed\b/gi, ui: { label: "dreamed", toLabel: "", copy: "\\bdreamed\\b", paste: "", mw: "dream", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  dreamt: { regex: /\bdreamt\b/gi, ui: { label: "dreamt", toLabel: "", copy: "\\bdreamt\\b", paste: "", mw: "dreamt", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  farther: { regex: /farther/gi, ui: { label: "farther (distance only)", toLabel: "", copy: "farther", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  for_awhile: { regex: /for awhile/gi, ui: { label: "for awhile", toLabel: "for a while", copy: "for awhile", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  forward: { regex: /\bforward\b/gi, ui: { label: "forward", toLabel: "", copy: "", paste: "", mw: "forward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  forwards: { regex: /\bforwards\b/gi, ui: { label: "forwards", toLabel: "", copy: "", paste: "", mw: "forwards", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  forwards2: { regex: /forwards/gi, ui: { label: "forwards", toLabel: "forward", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  further: { regex: /further/gi, ui: { label: "further (other measures)", toLabel: "", copy: "further", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  inward: { regex: /\binward\b/gi, ui: { label: "inward", toLabel: "", copy: "", paste: "", mw: "inward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  inwards: { regex: /\binwards\b/gi, ui: { label: "inwards", toLabel: "", copy: "", paste: "", mw: "inward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  inwards2: { regex: /\binwards\b/gi, ui: { label: "inwards", toLabel: "inward", copy: "", paste: "", mw: "inward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  kneeled: { regex: /kneeled/gi, ui: { label: "kneeled", toLabel: "", copy: "", paste: "", mw: "kneel", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  knelt: { regex: /knelt/gi, ui: { label: "knelt", toLabel: "", copy: "", paste: "", mw: "kneel", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  leaped: { regex: /leaped/gi, ui: { label: "leaped", toLabel: "", copy: "leaped", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  leapt: { regex: /leapt/gi, ui: { label: "leapt", toLabel: "", copy: "leapt", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  outward: { regex: /\boutward\b/gi, ui: { label: "outward", toLabel: "", copy: "", paste: "", mw: "outward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  outwards: { regex: /\boutwards\b/gi, ui: { label: "outwards", toLabel: "", copy: "", paste: "", mw: "outward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  outwards2: { regex: /\boutwards\b/gi, ui: { label: "outwards", toLabel: "outward", copy: "", paste: "", mw: "outward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  proved: { regex: /\bproved\b/gi, ui: { label: "proved", toLabel: "", copy: "\\bproved\\b", paste: "", mw: "prove", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  proven: { regex: /\bproven\b/gi, ui: { label: "proven", toLabel: "", copy: "\\bproven\\b", paste: "", mw: "prove", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  slinked: { regex: /\bslinked/gi, ui: { label: "slinked", toLabel: "", copy: "", paste: "", mw: "slink", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  slunk: { regex: /\bslunk\b/gi, ui: { label: "slunk", toLabel: "", copy: "", paste: "", mw: "slink", copyLabels: true}, type: IssueType.SW, styleGuides: []}, 
  sneaked: { regex: /\bsneaked\b/gi, ui: { label: "sneaked", toLabel: "", copy: "\\bsneaked\\b", paste: "", mw: "sneak", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  snuck: { regex: /\bsnuck\b/gi, ui: { label: "snuck", toLabel: "", copy: "\\bsnuck\\b", paste: "", mw: "sneak", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  strived: { regex: /\bstrived\b/gi, ui: { label: "strived", toLabel: "", copy: "\\bstrived\\b", paste: "", mw: "strive", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  strove: { regex: /\bstrove\b/gi, ui: { label: "strove", toLabel: "", copy: "\\bstrove\\b", paste: "", mw: "strive", copyLabels: false}, type: IssueType.SW, styleGuides: []}, 
  toward: { regex: /\btoward($|[^s])/gi, ui: { label: "toward", toLabel: "", copy: "\\btoward[^s]", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  towards: { regex: /\btowards/gi, ui: { label: "towards", toLabel: "", copy: "\\btowards", paste: "", mw: "", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  towards2: { regex: /\btowards\b/gi, ui: { label: "towards", toLabel: "toward", copy: "", paste: "", mw: "", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  upward: { regex: /\bupward\b/gi, ui: { label: "upward", toLabel: "", copy: "\\bupward\\b", paste: "", mw: "upward", copyLabels: false}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  upwards: { regex: /upwards/gi, ui: { label: "upwards", toLabel: "", copy: "", paste: "", mw: "upward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.JNC]}, 
  upwards2: { regex: /\bupwards\b/gi, ui: { label: "upwards", toLabel: "upward", copy: "", paste: "", mw: "upward", copyLabels: true}, type: IssueType.SW, styleGuides: [StyleGuide.YP]}, 
  fuck: { regex: /fuck/gi, ui: { label: "fuck (curse word)", toLabel: "", copy: "fuck", paste: "", mw: "", copyLabels: false}, type: IssueType.SL, styleGuides: []}, 
  retard: { regex: /retard/gi, ui: { label: "retard (slur?)", toLabel: "", copy: "retard", paste: "", mw: "", copyLabels: false}, type: IssueType.SL, styleGuides: []}, 
  spaz: { regex: /\bspaz\b/gi, ui: { label: "spaz (slur?)", toLabel: "", copy: "spaz", paste: "", mw: "", copyLabels: false}, type: IssueType.SL, styleGuides: []}, };

// variable is unused, but forces a type check
const unusedTypeCheck = idlessIssues as { [key: string]: Omit<Issue, "id"> };

type IdlessIssues = { [key in IssueId]: Omit<Issues[key], 'id'> };

function copyObjectIdsToValues(idlessIssues: IdlessIssues): Issues {
  const issues: Partial<Issues> = {};
  for (const key in idlessIssues) {
    const id = key as IssueId;
    issues[id] = { id, ...idlessIssues[id] as Omit<Issue, 'id'> };
  }
  return issues as Issues;
}

export const issues = copyObjectIdsToValues(idlessIssues);